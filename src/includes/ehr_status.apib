## EHR_STATUS [/ehr/{ehr_id}/ehr_status]

Management of [EHR_STATUS](https://specifications.openehr.org/releases/RM/latest/ehr.html#_ehr_status_class) resource.


### Get EHR_STATUS at time [GET /ehr/{ehr_id}/ehr_status{?version_at_time}]

Retrieves a version of the EHR_STATUS associated with the EHR identified by `ehr_id`.
If `version_at_time` is supplied, retrieves the version extant _at specified time_, otherwise retrieves the _latest_ EHR_STATUS version.

+ Parameters
    + ehr_id: `7d44b88c-4199-4bad-97dc-d78268e01398` (string) - EHR identifier 
        taken from EHR.ehr_id.value
    + version_at_time: `2015-01-20T19:30:22.765+01:00` (string, optional) - A given time in the extended ISO 8601 format

+ Response 200 (application/json)

    `200 OK` is returned when the requested EHR_STATUS is successfully retrieved. 

    + Headers

            Location: {baseUrl}/ehr/7d44b88c-4199-4bad-97dc-d78268e01398/ehr_status/6cb19121-4307-4648-9da0-d62e4d51f19b::openEHRSys.example.com::2
            ETag: "6cb19121-4307-4648-9da0-d62e4d51f19b::openEHRSys.example.com::2"

    + Body

<!-- include(../examples/ehr_status_02.json) -->

+ Response 400

    `400 Bad Request` is returned when the request has invalid content such as an invalid `version_at_time` format.
    
    + Body
    
+ Response 404

    `404 Not Found` returned when EHR with `ehr_id` does not exist or
    a version of an EHR_STATUS resource does not exist at the specified `version_at_time`.

    + Body


### Get EHR_STATUS by version id [GET /ehr/{ehr_id}/ehr_status/{version_uid}]

Retrieves a particular version of the EHR_STATUS identified by `version_uid` and associated with the EHR identified by `ehr_id`.

+ Parameters
    + ehr_id: `7d44b88c-4199-4bad-97dc-d78268e01398` (string) - EHR identifier 
        taken from EHR.ehr_id.value
    + version_uid: `6cb19121-4307-4648-9da0-d62e4d51f19b::openEHRSys.example.com::2` (string) - VERSION identifier taken from VERSION.uid.value

+ Response 200 (application/json)

    `200 OK` is returned when the requested EHR_STATUS is successfully retrieved.

    + Body

<!-- include(../examples/ehr_status_02.json) -->

+ Response 404

    `404 Not Found` is returned when an EHR with `ehr_id` does not exist or
    when an EHR_STATUS with `version_uid` does not exist.

    + Body


### Has EHR_STATUS with version id [HEAD /ehr/{ehr_id}/ehr_status/{version_uid}]

Checks if a particular version of the EHR_STATUS identified by `version_uid` and associated with the EHR identified by `ehr_id` exists.

+ Parameters
    + ehr_id: `7d44b88c-4199-4bad-97dc-d78268e01398` (string) - EHR identifier 
        taken from EHR.ehr_id.value
    + version_uid: `6cb19121-4307-4648-9da0-d62e4d51f19b::openEHRSys.example.com::2` (string) - VERSION identifier taken from VERSION.uid.value

+ Response 200

    `200 OK` without body content is returned when the version of the EHR_STATUS identified by `version_uid` and associated with the EHR identified by `ehr_id` exists.

    + Body

+ Response 404

    `404 Not Found` is returned when the version of the EHR_STATUS identified by `version_uid` and associated with the EHR identified by `ehr_id` does not exist, 
    or when the EHR with `ehr_id` does not exist.

    + Body


### Update EHR_STATUS [PUT /ehr/{ehr_id}/ehr_status]

Updates EHR_STATUS associated with the EHR identified by `ehr_id`.
The existing latest `version_uid` of EHR_STATUS resource (i.e. the `preceding_version_uid`) must be specified in the `If-Match` header.
The response will contain the updated EHR_STATUS resource when the `Prefer` header has a value of `return=representation`

+ Parameters
    + ehr_id: `7d44b88c-4199-4bad-97dc-d78268e01398` (string) - EHR identifier 
        taken from EHR.ehr_id.value

+ Request (application/json)

    + Header

            If-Match: "6cb19121-4307-4648-9da0-d62e4d51f19b::openEHRSys.example.com::1"
            Prefer: return={representation|minimal}

    + Body

<!-- include(../examples/ehr_status_02.json) -->

+ Response 200 (application/json)

    `200 OK` is returned when the EHR_STATUS is successfully updated, and 
    the updated resource is returned in the body when `Prefer` header value is `return=representation`.

    + Headers

            Location: {baseUrl}/ehr/7d44b88c-4199-4bad-97dc-d78268e01398/ehr_status/6cb19121-4307-4648-9da0-d62e4d51f19b::openEHRSys.example.com::2
            ETag: "6cb19121-4307-4648-9da0-d62e4d51f19b::openEHRSys.example.com::2"

    + Body

<!-- include(../examples/ehr_status_02.json) -->

+ Response 204

    `204 No Content` is returned when `Prefer` header is missing or is set to `return=minimal`.

    + Headers

            Location: {baseUrl}/ehr/7d44b88c-4199-4bad-97dc-d78268e01398/ehr_status/6cb19121-4307-4648-9da0-d62e4d51f19b::openEHRSys.example.com::2
            ETag: "6cb19121-4307-4648-9da0-d62e4d51f19b::openEHRSys.example.com::2"

+ Response 400

    `400 Bad Request` is returned when the request has invalid content.
    
    + Body
    
+ Response 404

    `404 Not Found` is returned when an EHR with `ehr_id` does not exist.

    + Body

+ Response 412

    `412 Precondition Failed` is returned when `If-Match` request header doesn't match the latest version on the service side.
    Returns also latest `version_uid` in the `Location` and `ETag` headers.

    + Headers

            Location: {baseUrl}/ehr/7d44b88c-4199-4bad-97dc-d78268e01398/ehr_status/6cb19121-4307-4648-9da0-d62e4d51f19b::openEHRSys.example.com::3
            ETag: "6cb19121-4307-4648-9da0-d62e4d51f19b::openEHRSys.example.com::3"

    + Body



## VERSIONED_EHR_STATUS [/ehr/{ehr_id}/versioned_ehr_status]

Management of [VERSIONED_EHR_STATUS](https://specifications.openehr.org/releases/RM/latest/ehr.html#_versioned_ehr_status_class) resource.


### Get versioned EHR_STATUS [GET /ehr/{ehr_id}/versioned_ehr_status]

Retrieves a VERSIONED_EHR_STATUS associated with an EHR identified by `ehr_id`.

+ Parameters

    + ehr_id: `7d44b88c-4199-4bad-97dc-d78268e01398` (string) - EHR identifier 
        taken from EHR.ehr_id.value

+ Response 200 (application/json)

    `200 OK` is returned when the requested VERSIONED_EHR_STATUS is successfully retrieved.

    + Body

<!-- include(../examples/versioned_ehr_status_01.json) -->
                  

+ Response 404

    `404 Not Found` is returned when an EHR with `ehr_id` does not exist.

    + Body


### Get versioned EHR_STATUS revision history [GET /ehr/{ehr_id}/versioned_ehr_status/revision_history]

Retrieves revision history of the VERSIONED_EHR_STATUS associated with the EHR identified by `ehr_id`.

+ Parameters

    + ehr_id: `7d44b88c-4199-4bad-97dc-d78268e01398` (string) - EHR identifier 
        taken from EHR.ehr_id.value

+ Response 200 (application/json)

    `200 OK` is returned when the requested VERSIONED_EHR_STATUS revision history is successfully retrieved.

    + Body

<!-- include(../examples/revision_history_ehr_status_01.json) -->

+ Response 404

    `404 Not Found` is returned when an EHR with `ehr_id` does not exist.

    + Body


### Get versioned EHR_STATUS version at time [GET /ehr/{ehr_id}/versioned_ehr_status/version{?version_at_time}]

Retrieves a VERSION from the VERSIONED_EHR_STATUS associated with the EHR identified by `ehr_id`.
If `version_at_time` is supplied, retrieves the VERSION extant _at specified time_, otherwise retrieves the _latest_ VERSION.

+ Parameters

    + ehr_id: `7d44b88c-4199-4bad-97dc-d78268e01398` (string) - EHR identifier 
        taken from EHR.ehr_id.value
    + version_at_time: `2015-01-20T19:30:22.765+01:00` (string, optional) - A given time in the extended ISO 8601 format

+ Response 200 (application/json)

    `200 OK` is returned when the requested VERSION is successfully retrieved.

    + Headers

            Location: {baseUrl}/ehr/7d44b88c-4199-4bad-97dc-d78268e01398/versioned_ehr_status/version/6cb19121-4307-4648-9da0-d62e4d51f19b::openEHRSys.example.com::1
            ETag: "6cb19121-4307-4648-9da0-d62e4d51f19b::openEHRSys.example.com::1"

    + Body

            {
              "_type": "ORIGINAL_VERSION",
              "uid": "OBJECT_VERSION_ID",                  /* _ehr_status_uid_::_system_id_::1 _system_id_ is the ID of the system from which the EHR was created */
              "contribution": "OBJECT_REF",
              "signature": "String",                       /* optional */
              "data": {
                "_type": "EHR_STATUS",
                "subject": {
                  "external_ref": {
                    "namespace": "DEMOGRAPHIC",
                    "type": "PERSON",
                    "id": {
                      "_type": "HIER_OBJECT_ID",
                      "value": "_valid_root_uid_::_extension_" /* root can be UUID or OID, UUID preferred '::_extension_' is optional */
                    }
                  }
                }
                "is_queryable": true,
                "is_modifiable": true,
                "other_details": {                         /* optional, ITEM_STRUCTURE, archetypable */
                  "_type": "ITEM_TREE",
                  "items": {
                    ...
                  }
                }
              },
              "commit_audit": {                            /* the time committed attribute is set by the server */
                "system_id": "_a_string_id_",              /* same as the container version.uid.system_id */
                "change_type": {
                  "value": "creation",
                  "terminology_id": {
                    "value": "openehr"
                  },
                  "code_string": "249"
                },
                "description": "optional description"
              },
              "attestations": [
                {
                  "system_id": "String",
                  "time_committed": "DV_DATE_TIME",
                  "description": "String"                  /* optional */
                  "reason": "DV_TEXT",
                  "proof": "String",                       /* optional */
                  "is_pending": "Boolean"
                },
                {...},
                {...}
              ]
            }

+ Response 400

    `400 Bad Request` is returned when the request is invalid such as an invalid `version_at_time` value.

    + Body

+ Response 404

    `404 Not Found` is returned when an EHR with `ehr_id` does not exist or
    when an EHR_STATUS does not exist at the specified `version_at_time`.

    + Body


### Get versioned EHR_STATUS version by id [GET /ehr/{ehr_id}/versioned_ehr_status/version/{version_uid}]

Retrieves a VERSION identified by `version_uid` of an EHR_STATUS associated with the EHR identified by `ehr_id`.

+ Parameters

    + ehr_id: `7d44b88c-4199-4bad-97dc-d78268e01398` (string) - EHR identifier 
        taken from EHR.ehr_id.value
    + version_uid: `6cb19121-4307-4648-9da0-d62e4d51f19b::openEHRSys.example.com::1` (string) - VERSION identifier taken from VERSION.uid.value

+ Response 200 (application/json)

    `200 OK` is returned when the requested VERSION is successfully retrieved.
    
    + Body

            {
              "_type": "ORIGINAL_VERSION",
              "uid": "OBJECT_VERSION_ID",                  /* _ehr_status_uid_::_system_id_::1 _system_id_ is the ID of the system from which the EHR was created */
              "contribution": {                            /* does not include reference to other versions, even that is mandatory in the IM */
                "uid": "HIER_OBJECT_ID",
                "audit": {
                  "system_id": "String",
                  "time_committed": "DV_DATE_TIME",
                  "description": "String"                  /* optional */
                }
              },
              "signature": "String",                       /* optional */
              "data": {
                "_type": "EHR_STATUS",
                "subject": {
                  "external_ref": {
                    "namespace": "DEMOGRAPHIC",
                    "type": "PERSON",
                    "id": {
                      "_type": "HIER_OBJECT_ID",
                      "value": "_valid_root_uid_::_extension_" /* root can be UUID or OID, UUID preferred '::_extension_' is optional */
                    }
                  }
                }
                "is_queryable": true,
                "is_modifiable": true,
                "other_details": {                         /* optional, ITEM_STRUCTURE, archetypable */
                  "_type": "ITEM_TREE",
                  "items": {
                    ...
                  }
                }
              },
              "commit_audit": {                            /* the time committed attribute is set by the server */
                "system_id": "_a_string_id_",              /* same as the container version.uid.system_id */
                "change_type": {
                  "value": "creation",
                  "terminology_id": {
                    "value": "openehr"
                  },
                  "code_string": "249"
                },
                "description": "optional description"
              },
              "attestations": [
                {
                  "system_id": "String",
                  "time_committed": "DV_DATE_TIME",
                  "description": "String"                  /* optional */
                  "reason": "DV_TEXT",
                  "proof": "String",                       /* optional */
                  "is_pending": "Boolean"
                },
                {...},
                {...}
              ]
            }

+ Response 404

    `404 Not Found` is returned when an EHR with `ehr_id` does not exist or 
    when an EHR_STATUS with `version_uid` does not exist.

    + Body
