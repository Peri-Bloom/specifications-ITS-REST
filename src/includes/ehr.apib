## EHR [/ehr]

Management of [EHRs](https://specifications.openehr.org/releases/RM/latest/ehr.html#_ehr_class).


### Create EHR [POST /ehr]

Create a new `EHR` with an auto-generated identifier.

An EHR_STATUS resource needs to be always created and committed in the new EHR.
This resource MAY be also supplied by the client as the request body. 
If not supplied, a default EHR_STATUS will be used by the service with following attributes:  
- `is_queryable`: true
- `is_modifiable`: true
- `subject`: a PARTY_SELF object

All other required EHR attributes and resources will be automatically created as needed by the
[EHR creation semantics](https://specifications.openehr.org/releases/RM/latest/ehr.html#_ehr_creation_semantics).


+ Request

    + Headers

            Prefer: return={representation|minimal}

    + Body

<!-- include(../examples/ehr_status_01.json) -->

+ Response 201 (application/json)

    `201 Created` is returned when the EHR has been successfully created. 
    The new EHR resource is returned in the body when the request's `Prefer` header value is `return=representation`, otherwise only headers are returned.

    + Headers

            Location: {baseUrl}/ehr/7d44b88c-4199-4bad-97dc-d78268e01398
            ETag: "7d44b88c-4199-4bad-97dc-d78268e01398"

    + Body

<!-- include(../examples/ehr_01.json) -->

+ Response 400

    `400 Bad Request` is returned when the request body (if provided) could not be parsed.

    + Body

+ Response 409

    `409 Conflict` Unable to create a new EHR due to a conflict with an already existing EHR
    with the same subject id, namespace pair.

    + Body


### Create EHR with id [PUT /ehr/{ehr_id}]

Create a new EHR with the specified `ehr_id` identifier. 

The value of the `ehr_id` unique identifier MUST be valid  
[HIER_OBJECT_ID](https://specifications.openehr.org/releases/BASE/latest/base_types.html#_hier_object_id_class)
value. It is strongly RECOMMENDED that an UUID always be used for this.

An EHR_STATUS resource needs to be always created and committed in the new EHR.
This resource MAY be also supplied by the client as the request body. 
If not supplied, a default EHR_STATUS will be used by the service with following attributes:  
- `is_queryable`: true
- `is_modifiable`: true
- `subject`: a PARTY_SELF object

All other required EHR attributes and resources will be automatically created as needed by the
[EHR creation semantics](https://specifications.openehr.org/releases/RM/latest/ehr.html#_ehr_creation_semantics).


+ Parameters

    + ehr_id: `7d44b88c-4199-4bad-97dc-d78268e01398` (string) - An UUID as a user specified EHR identifier

+ Request

    + Headers

            Prefer: return={representation|minimal}

    + Body

<!-- include(../examples/ehr_status_01.json) -->

+ Response 201 (application/json)

    `201 Created` is returned when the EHR has been successfully created. 
    The new EHR resource is returned in the body when the request's `Prefer` header value is `return=representation`, otherwise only headers are returned.

    + Headers

            Location: {baseUrl}/ehr/7d44b88c-4199-4bad-97dc-d78268e01398
            ETag: "7d44b88c-4199-4bad-97dc-d78268e01398"

    + Body

<!-- include(../examples/ehr_01.json) -->

+ Response 400

    `400 Bad Request` is returned when the request has invalid `ehr_id` format or invalid content 
    (e.g. either the body of the request could not be read, or converted to an EHR_STATUS object).

    + Body

+ Response 409

    `409 Conflict` Unable to create a new EHR due to a conflict with an already existing EHR.
    Can happen when the supplied `ehr_id` is already used by an existing EHR.

    + Body


### Get EHR by id [GET /ehr/{ehr_id}]

Retrieve the EHR with the specified `ehr_id`.

+ Parameters

    + ehr_id: `7d44b88c-4199-4bad-97dc-d78268e01398` (string) - EHR identifier 
        taken from EHR.ehr_id.value

+ Response 200 (application/json)

    `200 OK` is returned when the requested EHR resource is successfully retrieved. 
    
    + Body

<!-- include(../examples/ehr_01.json) -->

+ Response 404

    `404 Not Found` is returned when an EHR with `ehr_id` does not exist.

    + Body


### Get EHR by subject id [GET /ehr{?subject_id,subject_namespace}]

Retrieve the EHR with the specified `subject_id` and `subject_namespace`.
These subject parameters will be matched against EHR's EHR_STATUS.subject.external_ref.id.value and 
EHR_STATUS.subject.external_ref.namespace values.

+ Parameters

    + subject_id: `ins01` (string) - subject id
    + subject_namespace: `examples` (string) - id namespace

+ Response 200 (application/json)

    `200 OK` is returned when the requested EHR resource is successfully retrieved.

    + Body

<!-- include(../examples/ehr_01.json) -->

+ Response 404

    `404 Not Found` is returned when an EHR with supplied subject parameters does not exist.

    + Body


### Has EHR with id [HEAD /ehr/{ehr_id}]

Checks if the EHR with identifier `ehr_id` exists.

+ Parameters

  + ehr_id: `7d44b88c-4199-4bad-97dc-d78268e01398` (string) - EHR identifier
    taken from EHR.ehr_id.value

+ Response 200

  `200 OK` without body content is returned when the EHR with identifier `ehr_id` exists.

  + Body

+ Response 404

  `404 Not Found` is returned when the EHR with `ehr_id` does not exist.

  + Body


### Has EHR for subject id [HEAD /ehr{?subject_id,subject_namespace}]

Checks if the EHR for `subject_id` and `subject_namespace` exists.
These subject parameters will be matched against EHR's EHR_STATUS.subject.external_ref.id.value and
EHR_STATUS.subject.external_ref.namespace values.

+ Parameters

  + subject_id: `ins01` (string) - subject id
  + subject_namespace: `examples` (string) - id namespace

+ Response 200

  `200 OK` without body content is returned when the EHR for `subject_id` and `subject_namespace` exists.

  + Body

+ Response 404

  `404 Not Found` is returned when the EHR for `subject_id` and `subject_namespace` does not exist.

  + Body

