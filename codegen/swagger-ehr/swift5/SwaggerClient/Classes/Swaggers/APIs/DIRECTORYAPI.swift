//
// DIRECTORYAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DIRECTORYAPI {
    /**
     * enum for parameter prefer
     */
    public enum Prefer_directoryCreate: String { 
        case representation = "return=representation"
        case minimal = "return=minimal"
    }

    /**
     Create directory

     - parameter body: (body) The directory.
 
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter prefer: (header) Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return=minimal)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func directoryCreate(body: Folder, ehrId: String, prefer: Prefer_directoryCreate? = nil, completion: @escaping ((_ data: Folder?,_ error: Error?) -> Void)) {
        directoryCreateWithRequestBuilder(body: body, ehrId: ehrId, prefer: prefer).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create directory
     - POST /ehr/{ehr_id}/directory

     - responseHeaders: [ETag(String), Location(String)]
     - responseHeaders: [ETag(String), Location(String)]
     - examples: [{contentType=application/json, example={
  "archetype_node_id" : "openEHR-EHR-FOLDER.directory.v1",
  "name" : {
    "value" : "Directory"
  },
  "uid" : {
    "_type" : "OBJECT_VERSION_ID",
    "value" : "8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1"
  },
  "items" : [ ],
  "folders" : [ ]
}}]
     - parameter body: (body) The directory.
 
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter prefer: (header) Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return=minimal)

     - returns: RequestBuilder<Folder> 
     */
    open class func directoryCreateWithRequestBuilder(body: Folder, ehrId: String, prefer: Prefer_directoryCreate? = nil) -> RequestBuilder<Folder> {
        var path = "/ehr/{ehr_id}/directory"
        let ehrIdPreEscape = "\(ehrId)"
        let ehrIdPostEscape = ehrIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ehr_id}", with: ehrIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Prefer": prefer?.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Folder>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Delete directory

     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter ifMatch: (header) Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#x27;s value.  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func directoryDelete(ehrId: String, ifMatch: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        directoryDeleteWithRequestBuilder(ehrId: ehrId, ifMatch: ifMatch).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete directory
     - DELETE /ehr/{ehr_id}/directory

     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter ifMatch: (header) Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#x27;s value.  

     - returns: RequestBuilder<Void> 
     */
    open class func directoryDeleteWithRequestBuilder(ehrId: String, ifMatch: String) -> RequestBuilder<Void> {
        var path = "/ehr/{ehr_id}/directory"
        let ehrIdPreEscape = "\(ehrId)"
        let ehrIdPostEscape = ehrIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ehr_id}", with: ehrIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "If-Match": ifMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Get folder in directory version at time

     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter versionAtTime: (query) A given time in the extended ISO 8601 format.  (optional)
     - parameter path: (query) A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func directoryGetAtTime(ehrId: String, versionAtTime: String? = nil, path: String? = nil, completion: @escaping ((_ data: Folder?,_ error: Error?) -> Void)) {
        directoryGetAtTimeWithRequestBuilder(ehrId: ehrId, versionAtTime: versionAtTime, path: path).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get folder in directory version at time
     - GET /ehr/{ehr_id}/directory

     - examples: [{contentType=application/json, example={
  "archetype_node_id" : "openEHR-EHR-FOLDER.directory.v1",
  "name" : {
    "value" : "Directory"
  },
  "uid" : {
    "_type" : "OBJECT_VERSION_ID",
    "value" : "8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1"
  },
  "items" : [ ],
  "folders" : [ ]
}}]
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter versionAtTime: (query) A given time in the extended ISO 8601 format.  (optional)
     - parameter path: (query) A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.  (optional)

     - returns: RequestBuilder<Folder> 
     */
    open class func directoryGetAtTimeWithRequestBuilder(ehrId: String, versionAtTime: String? = nil, path: String? = nil) -> RequestBuilder<Folder> {
        var path = "/ehr/{ehr_id}/directory"
        let ehrIdPreEscape = "\(ehrId)"
        let ehrIdPostEscape = ehrIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ehr_id}", with: ehrIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "version_at_time": versionAtTime, 
                        "path": path
        ])


        let requestBuilder: RequestBuilder<Folder>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get folder in directory version

     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter versionUid: (path) VERSION identifier taken from VERSION.uid.value.  
     - parameter path: (query) A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func directoryGetByVersionId(ehrId: String, versionUid: String, path: String? = nil, completion: @escaping ((_ data: Folder?,_ error: Error?) -> Void)) {
        directoryGetByVersionIdWithRequestBuilder(ehrId: ehrId, versionUid: versionUid, path: path).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get folder in directory version
     - GET /ehr/{ehr_id}/directory/{version_uid}

     - examples: [{contentType=application/json, example={
  "archetype_node_id" : "openEHR-EHR-FOLDER.directory.v1",
  "name" : {
    "value" : "Directory"
  },
  "uid" : {
    "_type" : "OBJECT_VERSION_ID",
    "value" : "8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1"
  },
  "items" : [ ],
  "folders" : [ ]
}}]
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter versionUid: (path) VERSION identifier taken from VERSION.uid.value.  
     - parameter path: (query) A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.  (optional)

     - returns: RequestBuilder<Folder> 
     */
    open class func directoryGetByVersionIdWithRequestBuilder(ehrId: String, versionUid: String, path: String? = nil) -> RequestBuilder<Folder> {
        var path = "/ehr/{ehr_id}/directory/{version_uid}"
        let ehrIdPreEscape = "\(ehrId)"
        let ehrIdPostEscape = ehrIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ehr_id}", with: ehrIdPostEscape, options: .literal, range: nil)
        let versionUidPreEscape = "\(versionUid)"
        let versionUidPostEscape = versionUidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{version_uid}", with: versionUidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "path": path
        ])


        let requestBuilder: RequestBuilder<Folder>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter prefer
     */
    public enum Prefer_directoryUpdate: String { 
        case representation = "return=representation"
        case minimal = "return=minimal"
    }

    /**
     Update directory

     - parameter body: (body) The new directory.
 
     - parameter ifMatch: (header) Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#x27;s value.  
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter prefer: (header) Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return=minimal)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func directoryUpdate(body: Folder, ifMatch: String, ehrId: String, prefer: Prefer_directoryUpdate? = nil, completion: @escaping ((_ data: Folder?,_ error: Error?) -> Void)) {
        directoryUpdateWithRequestBuilder(body: body, ifMatch: ifMatch, ehrId: ehrId, prefer: prefer).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update directory
     - PUT /ehr/{ehr_id}/directory

     - responseHeaders: [ETag(String), Location(String)]
     - responseHeaders: [ETag(String), Location(String)]
     - examples: [{contentType=application/json, example={
  "archetype_node_id" : "openEHR-EHR-FOLDER.directory.v1",
  "name" : {
    "value" : "Directory"
  },
  "uid" : {
    "_type" : "OBJECT_VERSION_ID",
    "value" : "8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1"
  },
  "items" : [ ],
  "folders" : [ ]
}}]
     - parameter body: (body) The new directory.
 
     - parameter ifMatch: (header) Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#x27;s value.  
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter prefer: (header) Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return=minimal)

     - returns: RequestBuilder<Folder> 
     */
    open class func directoryUpdateWithRequestBuilder(body: Folder, ifMatch: String, ehrId: String, prefer: Prefer_directoryUpdate? = nil) -> RequestBuilder<Folder> {
        var path = "/ehr/{ehr_id}/directory"
        let ehrIdPreEscape = "\(ehrId)"
        let ehrIdPostEscape = ehrIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ehr_id}", with: ehrIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "If-Match": ifMatch,
                        "Prefer": prefer?.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Folder>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
}
