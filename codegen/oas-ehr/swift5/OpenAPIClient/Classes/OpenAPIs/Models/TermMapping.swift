//
// TermMapping.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TermMapping: Codable, JSONEncodable, Hashable {

    static let matchRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[><=?]$/")
    public var match: String
    public var purpose: DvCodedText?
    public var target: CodePhrase

    public init(match: String, purpose: DvCodedText? = nil, target: CodePhrase) {
        self.match = match
        self.purpose = purpose
        self.target = target
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case match
        case purpose
        case target
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(match, forKey: .match)
        try container.encodeIfPresent(purpose, forKey: .purpose)
        try container.encode(target, forKey: .target)
    }
}

