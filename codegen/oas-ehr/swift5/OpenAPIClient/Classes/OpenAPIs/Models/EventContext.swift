//
// EventContext.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EventContext: Codable, JSONEncodable, Hashable {

    public var startTime: DvDateTime
    public var endTime: DvDateTime?
    public var location: String?
    public var setting: DvCodedText
    public var otherContext: ItemStructure?
    public var healthCareFacility: PartyIdentified?
    public var participations: [Participation]?
    public var type: String?

    public init(startTime: DvDateTime, endTime: DvDateTime? = nil, location: String? = nil, setting: DvCodedText, otherContext: ItemStructure? = nil, healthCareFacility: PartyIdentified? = nil, participations: [Participation]? = nil, type: String? = nil) {
        self.startTime = startTime
        self.endTime = endTime
        self.location = location
        self.setting = setting
        self.otherContext = otherContext
        self.healthCareFacility = healthCareFacility
        self.participations = participations
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case startTime = "start_time"
        case endTime = "end_time"
        case location
        case setting
        case otherContext = "other_context"
        case healthCareFacility = "health_care_facility"
        case participations
        case type = "_type"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(startTime, forKey: .startTime)
        try container.encodeIfPresent(endTime, forKey: .endTime)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encode(setting, forKey: .setting)
        try container.encodeIfPresent(otherContext, forKey: .otherContext)
        try container.encodeIfPresent(healthCareFacility, forKey: .healthCareFacility)
        try container.encodeIfPresent(participations, forKey: .participations)
        try container.encodeIfPresent(type, forKey: .type)
    }
}

