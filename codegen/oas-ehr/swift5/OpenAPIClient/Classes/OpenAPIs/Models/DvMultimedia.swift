//
// DvMultimedia.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DvMultimedia: Codable, JSONEncodable, Hashable {

    public var alternateText: String?
    public var uri: DvUri?
    public var data: String?
    public var mediaType: CodePhrase
    public var compressionAlgorithm: CodePhrase?
    public var integrityCheck: String?
    public var integrityCheckAlgorithm: CodePhrase?
    public var thumbnail: DvMultimedia?
    public var size: Int

    public init(alternateText: String? = nil, uri: DvUri? = nil, data: String? = nil, mediaType: CodePhrase, compressionAlgorithm: CodePhrase? = nil, integrityCheck: String? = nil, integrityCheckAlgorithm: CodePhrase? = nil, thumbnail: DvMultimedia? = nil, size: Int) {
        self.alternateText = alternateText
        self.uri = uri
        self.data = data
        self.mediaType = mediaType
        self.compressionAlgorithm = compressionAlgorithm
        self.integrityCheck = integrityCheck
        self.integrityCheckAlgorithm = integrityCheckAlgorithm
        self.thumbnail = thumbnail
        self.size = size
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case alternateText = "alternate_text"
        case uri
        case data
        case mediaType = "media_type"
        case compressionAlgorithm = "compression_algorithm"
        case integrityCheck = "integrity_check"
        case integrityCheckAlgorithm = "integrity_check_algorithm"
        case thumbnail
        case size
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(alternateText, forKey: .alternateText)
        try container.encodeIfPresent(uri, forKey: .uri)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encode(mediaType, forKey: .mediaType)
        try container.encodeIfPresent(compressionAlgorithm, forKey: .compressionAlgorithm)
        try container.encodeIfPresent(integrityCheck, forKey: .integrityCheck)
        try container.encodeIfPresent(integrityCheckAlgorithm, forKey: .integrityCheckAlgorithm)
        try container.encodeIfPresent(thumbnail, forKey: .thumbnail)
        try container.encode(size, forKey: .size)
    }
}

