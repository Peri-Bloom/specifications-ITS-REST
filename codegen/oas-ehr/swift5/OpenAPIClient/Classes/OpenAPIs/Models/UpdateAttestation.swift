//
// UpdateAttestation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdateAttestation: Codable, JSONEncodable, Hashable {

    public var type: String? = "UPDATE_ATTESTATION"
    public var attestedView: DvMultimedia?
    public var proof: String?
    public var items: [DvEhrUri]?
    public var reason: DvText
    public var isPending: Bool
    public var changeType: TerminologyCode
    public var description: DvText?
    public var committer: PartyProxy

    public init(type: String? = "UPDATE_ATTESTATION", attestedView: DvMultimedia? = nil, proof: String? = nil, items: [DvEhrUri]? = nil, reason: DvText, isPending: Bool, changeType: TerminologyCode, description: DvText? = nil, committer: PartyProxy) {
        self.type = type
        self.attestedView = attestedView
        self.proof = proof
        self.items = items
        self.reason = reason
        self.isPending = isPending
        self.changeType = changeType
        self.description = description
        self.committer = committer
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type = "_type"
        case attestedView = "attested_view"
        case proof
        case items
        case reason
        case isPending = "is_pending"
        case changeType = "change_type"
        case description
        case committer
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(attestedView, forKey: .attestedView)
        try container.encodeIfPresent(proof, forKey: .proof)
        try container.encodeIfPresent(items, forKey: .items)
        try container.encode(reason, forKey: .reason)
        try container.encode(isPending, forKey: .isPending)
        try container.encode(changeType, forKey: .changeType)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(committer, forKey: .committer)
    }
}

