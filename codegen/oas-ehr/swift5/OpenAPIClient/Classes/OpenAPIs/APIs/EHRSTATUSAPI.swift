//
// EHRSTATUSAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class EHRSTATUSAPI {

    /**
     Get EHR_STATUS at time
     
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter versionAtTime: (query) A given time in the extended ISO 8601 format.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ehrStatusGetAtTime(ehrId: String, versionAtTime: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EhrStatus?, _ error: Error?) -> Void)) -> RequestTask {
        return ehrStatusGetAtTimeWithRequestBuilder(ehrId: ehrId, versionAtTime: versionAtTime).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get EHR_STATUS at time
     - GET /ehr/{ehr_id}/ehr_status
     - Retrieves a version of the EHR_STATUS associated with the EHR identified by `ehr_id`.  If `version_at_time` is supplied, retrieves the version extant _at specified time_, otherwise retrieves the _latest_ EHR_STATUS version. 
     - responseHeaders: [ETag(String), Location(String)]
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter versionAtTime: (query) A given time in the extended ISO 8601 format.  (optional)
     - returns: RequestBuilder<EhrStatus> 
     */
    open class func ehrStatusGetAtTimeWithRequestBuilder(ehrId: String, versionAtTime: String? = nil) -> RequestBuilder<EhrStatus> {
        var localVariablePath = "/ehr/{ehr_id}/ehr_status"
        let ehrIdPreEscape = "\(APIHelper.mapValueToPathItem(ehrId))"
        let ehrIdPostEscape = ehrIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ehr_id}", with: ehrIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "version_at_time": (wrappedValue: versionAtTime?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EhrStatus>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get EHR_STATUS by version id
     
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter versionUid: (path) VERSION identifier taken from VERSION.uid.value.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ehrStatusGetByVersionId(ehrId: String, versionUid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EhrStatus?, _ error: Error?) -> Void)) -> RequestTask {
        return ehrStatusGetByVersionIdWithRequestBuilder(ehrId: ehrId, versionUid: versionUid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get EHR_STATUS by version id
     - GET /ehr/{ehr_id}/ehr_status/{version_uid}
     - Retrieves a particular version of the EHR_STATUS identified by `version_uid` and associated with the EHR identified by `ehr_id`. 
     - responseHeaders: [ETag(String), Location(String)]
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter versionUid: (path) VERSION identifier taken from VERSION.uid.value.  
     - returns: RequestBuilder<EhrStatus> 
     */
    open class func ehrStatusGetByVersionIdWithRequestBuilder(ehrId: String, versionUid: String) -> RequestBuilder<EhrStatus> {
        var localVariablePath = "/ehr/{ehr_id}/ehr_status/{version_uid}"
        let ehrIdPreEscape = "\(APIHelper.mapValueToPathItem(ehrId))"
        let ehrIdPostEscape = ehrIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ehr_id}", with: ehrIdPostEscape, options: .literal, range: nil)
        let versionUidPreEscape = "\(APIHelper.mapValueToPathItem(versionUid))"
        let versionUidPostEscape = versionUidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version_uid}", with: versionUidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EhrStatus>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter prefer
     */
    public enum Prefer_ehrStatusUpdate: String, CaseIterable {
        case representation = "return=representation"
        case minimal = "return=minimal"
    }

    /**
     Update EHR_STATUS
     
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter ifMatch: (header) Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#39;s value.  
     - parameter ehrStatus: (body) The new EHR_STATUS.  
     - parameter prefer: (header) Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to .returnEqualMinimal)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ehrStatusUpdate(ehrId: String, ifMatch: String, ehrStatus: EhrStatus, prefer: Prefer_ehrStatusUpdate? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EhrStatus?, _ error: Error?) -> Void)) -> RequestTask {
        return ehrStatusUpdateWithRequestBuilder(ehrId: ehrId, ifMatch: ifMatch, ehrStatus: ehrStatus, prefer: prefer).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update EHR_STATUS
     - PUT /ehr/{ehr_id}/ehr_status
     - Updates EHR_STATUS associated with the EHR identified by `ehr_id`.  The existing latest `version_uid` of EHR_STATUS resource (i.e. the `preceding_version_uid`) must be specified in the `If-Match` header.  The response will contain the updated EHR_STATUS resource when the `Prefer` header has a value of `return=representation`. 
     - responseHeaders: [ETag(String), Location(String)]
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter ifMatch: (header) Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#39;s value.  
     - parameter ehrStatus: (body) The new EHR_STATUS.  
     - parameter prefer: (header) Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to .returnEqualMinimal)
     - returns: RequestBuilder<EhrStatus?> 
     */
    open class func ehrStatusUpdateWithRequestBuilder(ehrId: String, ifMatch: String, ehrStatus: EhrStatus, prefer: Prefer_ehrStatusUpdate? = nil) -> RequestBuilder<EhrStatus?> {
        var localVariablePath = "/ehr/{ehr_id}/ehr_status"
        let ehrIdPreEscape = "\(APIHelper.mapValueToPathItem(ehrId))"
        let ehrIdPostEscape = ehrIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ehr_id}", with: ehrIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ehrStatus)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "If-Match": ifMatch.encodeToJSON(),
            "Prefer": prefer?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EhrStatus?>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get versioned EHR_STATUS
     
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func versionedEhrStatusGet(ehrId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VersionedEhrStatus?, _ error: Error?) -> Void)) -> RequestTask {
        return versionedEhrStatusGetWithRequestBuilder(ehrId: ehrId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get versioned EHR_STATUS
     - GET /ehr/{ehr_id}/versioned_ehr_status
     - Retrieves a VERSIONED_EHR_STATUS associated with an EHR identified by `ehr_id`. 
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - returns: RequestBuilder<VersionedEhrStatus> 
     */
    open class func versionedEhrStatusGetWithRequestBuilder(ehrId: String) -> RequestBuilder<VersionedEhrStatus> {
        var localVariablePath = "/ehr/{ehr_id}/versioned_ehr_status"
        let ehrIdPreEscape = "\(APIHelper.mapValueToPathItem(ehrId))"
        let ehrIdPostEscape = ehrIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ehr_id}", with: ehrIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VersionedEhrStatus>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get versioned EHR_STATUS revision history
     
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func versionedEhrStatusRevisionHistory(ehrId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RevisionHistory?, _ error: Error?) -> Void)) -> RequestTask {
        return versionedEhrStatusRevisionHistoryWithRequestBuilder(ehrId: ehrId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get versioned EHR_STATUS revision history
     - GET /ehr/{ehr_id}/versioned_ehr_status/revision_history
     - Retrieves revision history of the VERSIONED_EHR_STATUS associated with the EHR identified by `ehr_id`. 
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - returns: RequestBuilder<RevisionHistory> 
     */
    open class func versionedEhrStatusRevisionHistoryWithRequestBuilder(ehrId: String) -> RequestBuilder<RevisionHistory> {
        var localVariablePath = "/ehr/{ehr_id}/versioned_ehr_status/revision_history"
        let ehrIdPreEscape = "\(APIHelper.mapValueToPathItem(ehrId))"
        let ehrIdPostEscape = ehrIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ehr_id}", with: ehrIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RevisionHistory>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get versioned EHR_STATUS version at time
     
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter versionAtTime: (query) A given time in the extended ISO 8601 format.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func versionedEhrStatusVersionGetAtTime(ehrId: String, versionAtTime: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Version?, _ error: Error?) -> Void)) -> RequestTask {
        return versionedEhrStatusVersionGetAtTimeWithRequestBuilder(ehrId: ehrId, versionAtTime: versionAtTime).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get versioned EHR_STATUS version at time
     - GET /ehr/{ehr_id}/versioned_ehr_status/version
     - Retrieves a VERSION from the VERSIONED_EHR_STATUS associated with the EHR identified by `ehr_id`.  If `version_at_time` is supplied, retrieves the VERSION extant _at specified time_, otherwise retrieves the _latest_ VERSION. 
     - responseHeaders: [ETag(String), Location(String)]
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter versionAtTime: (query) A given time in the extended ISO 8601 format.  (optional)
     - returns: RequestBuilder<Version> 
     */
    open class func versionedEhrStatusVersionGetAtTimeWithRequestBuilder(ehrId: String, versionAtTime: String? = nil) -> RequestBuilder<Version> {
        var localVariablePath = "/ehr/{ehr_id}/versioned_ehr_status/version"
        let ehrIdPreEscape = "\(APIHelper.mapValueToPathItem(ehrId))"
        let ehrIdPostEscape = ehrIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ehr_id}", with: ehrIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "version_at_time": (wrappedValue: versionAtTime?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Version>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get versioned EHR_STATUS version by id
     
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter versionUid: (path) VERSION identifier taken from VERSION.uid.value.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func versionedEhrStatusVersionGetById(ehrId: String, versionUid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Version?, _ error: Error?) -> Void)) -> RequestTask {
        return versionedEhrStatusVersionGetByIdWithRequestBuilder(ehrId: ehrId, versionUid: versionUid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get versioned EHR_STATUS version by id
     - GET /ehr/{ehr_id}/versioned_ehr_status/version/{version_uid}
     - Retrieves a VERSION identified by `version_uid` of an EHR_STATUS associated with the EHR identified by `ehr_id`. 
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter versionUid: (path) VERSION identifier taken from VERSION.uid.value.  
     - returns: RequestBuilder<Version> 
     */
    open class func versionedEhrStatusVersionGetByIdWithRequestBuilder(ehrId: String, versionUid: String) -> RequestBuilder<Version> {
        var localVariablePath = "/ehr/{ehr_id}/versioned_ehr_status/version/{version_uid}"
        let ehrIdPreEscape = "\(APIHelper.mapValueToPathItem(ehrId))"
        let ehrIdPostEscape = ehrIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ehr_id}", with: ehrIdPostEscape, options: .literal, range: nil)
        let versionUidPreEscape = "\(APIHelper.mapValueToPathItem(versionUid))"
        let versionUidPostEscape = versionUidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version_uid}", with: versionUidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Version>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
