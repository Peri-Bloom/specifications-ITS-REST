//
// DIRECTORYAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DIRECTORYAPI {

    /**
     * enum for parameter prefer
     */
    public enum Prefer_directoryCreate: String, CaseIterable {
        case representation = "return=representation"
        case minimal = "return=minimal"
    }

    /**
     Create directory
     
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter folder: (body) The directory.  
     - parameter prefer: (header) Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to .returnEqualMinimal)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func directoryCreate(ehrId: String, folder: Folder, prefer: Prefer_directoryCreate? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Folder?, _ error: Error?) -> Void)) -> RequestTask {
        return directoryCreateWithRequestBuilder(ehrId: ehrId, folder: folder, prefer: prefer).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create directory
     - POST /ehr/{ehr_id}/directory
     - Creates a new directory FOLDER associated with the EHR identified by `ehr_id`. 
     - responseHeaders: [ETag(String), Location(String)]
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter folder: (body) The directory.  
     - parameter prefer: (header) Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to .returnEqualMinimal)
     - returns: RequestBuilder<Folder> 
     */
    open class func directoryCreateWithRequestBuilder(ehrId: String, folder: Folder, prefer: Prefer_directoryCreate? = nil) -> RequestBuilder<Folder> {
        var localVariablePath = "/ehr/{ehr_id}/directory"
        let ehrIdPreEscape = "\(APIHelper.mapValueToPathItem(ehrId))"
        let ehrIdPostEscape = ehrIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ehr_id}", with: ehrIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: folder)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Prefer": prefer?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Folder>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Delete directory
     
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter ifMatch: (header) Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#39;s value.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func directoryDelete(ehrId: String, ifMatch: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return directoryDeleteWithRequestBuilder(ehrId: ehrId, ifMatch: ifMatch).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete directory
     - DELETE /ehr/{ehr_id}/directory
     - Deletes directory FOLDER associated with the EHR identified by `ehr_id`.  The existing latest `version_uid` of directory FOLDER resource (i.e. the `preceding_version_uid`) must be specified in the `If-Match` header. 
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter ifMatch: (header) Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#39;s value.  
     - returns: RequestBuilder<Void> 
     */
    open class func directoryDeleteWithRequestBuilder(ehrId: String, ifMatch: String) -> RequestBuilder<Void> {
        var localVariablePath = "/ehr/{ehr_id}/directory"
        let ehrIdPreEscape = "\(APIHelper.mapValueToPathItem(ehrId))"
        let ehrIdPostEscape = ehrIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ehr_id}", with: ehrIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "If-Match": ifMatch.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get folder in directory version at time
     
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter versionAtTime: (query) A given time in the extended ISO 8601 format.  (optional)
     - parameter path: (query) A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func directoryGetAtTime(ehrId: String, versionAtTime: String? = nil, path: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Folder?, _ error: Error?) -> Void)) -> RequestTask {
        return directoryGetAtTimeWithRequestBuilder(ehrId: ehrId, versionAtTime: versionAtTime, path: path).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get folder in directory version at time
     - GET /ehr/{ehr_id}/directory
     - Retrieves the version of the directory FOLDER associated with the EHR identified by `ehr_id`.  If `version_at_time` is supplied, retrieves the version extant _at specified time_, otherwise retrieves the _latest_ directory FOLDER version.   If `path` is supplied, retrieves from the directory only the sub-FOLDER that is associated with that path. 
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter versionAtTime: (query) A given time in the extended ISO 8601 format.  (optional)
     - parameter path: (query) A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.  (optional)
     - returns: RequestBuilder<Folder?> 
     */
    open class func directoryGetAtTimeWithRequestBuilder(ehrId: String, versionAtTime: String? = nil, path: String? = nil) -> RequestBuilder<Folder?> {
        var localVariablePath = "/ehr/{ehr_id}/directory"
        let ehrIdPreEscape = "\(APIHelper.mapValueToPathItem(ehrId))"
        let ehrIdPostEscape = ehrIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ehr_id}", with: ehrIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "version_at_time": (wrappedValue: versionAtTime?.encodeToJSON(), isExplode: true),
            "path": (wrappedValue: path?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Folder?>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get folder in directory version
     
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter versionUid: (path) VERSION identifier taken from VERSION.uid.value.  
     - parameter path: (query) A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func directoryGetByVersionId(ehrId: String, versionUid: String, path: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Folder?, _ error: Error?) -> Void)) -> RequestTask {
        return directoryGetByVersionIdWithRequestBuilder(ehrId: ehrId, versionUid: versionUid, path: path).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get folder in directory version
     - GET /ehr/{ehr_id}/directory/{version_uid}
     - Retrieves a particular version of the directory FOLDER identified by `version_uid` and associated with the EHR identified by `ehr_id`.  If `path` is supplied, retrieves from the directory only the sub-FOLDER that is associated with that path. 
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter versionUid: (path) VERSION identifier taken from VERSION.uid.value.  
     - parameter path: (query) A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.  (optional)
     - returns: RequestBuilder<Folder> 
     */
    open class func directoryGetByVersionIdWithRequestBuilder(ehrId: String, versionUid: String, path: String? = nil) -> RequestBuilder<Folder> {
        var localVariablePath = "/ehr/{ehr_id}/directory/{version_uid}"
        let ehrIdPreEscape = "\(APIHelper.mapValueToPathItem(ehrId))"
        let ehrIdPostEscape = ehrIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ehr_id}", with: ehrIdPostEscape, options: .literal, range: nil)
        let versionUidPreEscape = "\(APIHelper.mapValueToPathItem(versionUid))"
        let versionUidPostEscape = versionUidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version_uid}", with: versionUidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "path": (wrappedValue: path?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Folder>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter prefer
     */
    public enum Prefer_directoryUpdate: String, CaseIterable {
        case representation = "return=representation"
        case minimal = "return=minimal"
    }

    /**
     Update directory
     
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter ifMatch: (header) Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#39;s value.  
     - parameter folder: (body) The new directory.  
     - parameter prefer: (header) Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to .returnEqualMinimal)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func directoryUpdate(ehrId: String, ifMatch: String, folder: Folder, prefer: Prefer_directoryUpdate? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Folder?, _ error: Error?) -> Void)) -> RequestTask {
        return directoryUpdateWithRequestBuilder(ehrId: ehrId, ifMatch: ifMatch, folder: folder, prefer: prefer).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update directory
     - PUT /ehr/{ehr_id}/directory
     - Updates directory FOLDER associated with the EHR identified by `ehr_id`.  The existing latest `version_uid` of directory FOLDER resource (i.e. the `preceding_version_uid`) must be specified in the `If-Match` header. 
     - responseHeaders: [ETag(String), Location(String)]
     - parameter ehrId: (path) EHR identifier taken from EHR.ehr_id.value.  
     - parameter ifMatch: (header) Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#39;s value.  
     - parameter folder: (body) The new directory.  
     - parameter prefer: (header) Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to .returnEqualMinimal)
     - returns: RequestBuilder<Folder?> 
     */
    open class func directoryUpdateWithRequestBuilder(ehrId: String, ifMatch: String, folder: Folder, prefer: Prefer_directoryUpdate? = nil) -> RequestBuilder<Folder?> {
        var localVariablePath = "/ehr/{ehr_id}/directory"
        let ehrIdPreEscape = "\(APIHelper.mapValueToPathItem(ehrId))"
        let ehrIdPostEscape = ehrIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ehr_id}", with: ehrIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: folder)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "If-Match": ifMatch.encodeToJSON(),
            "Prefer": prefer?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Folder?>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
