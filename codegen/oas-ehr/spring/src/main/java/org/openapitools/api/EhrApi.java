/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Composition;
import org.openapitools.model.Contribution;
import org.openapitools.model.Ehr;
import org.openapitools.model.EhrStatus;
import org.openapitools.model.Error;
import org.openapitools.model.Folder;
import org.openapitools.model.NewContribution;
import org.openapitools.model.RevisionHistory;
import org.openapitools.model.Version;
import org.openapitools.model.VersionedComposition;
import org.openapitools.model.VersionedEhrStatus;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "COMPOSITION", description = "Management of [COMPOSITION](https://specifications.openehr.org/releases/RM/latest/ehr.html#_composition_class) and [VERSIONED_COMPOSITION](https://specifications.openehr.org/releases/RM/latest/ehr.html#_versioned_composition_class) resources.
Actions upon resources of this group are also formally described in the [I_EHR_COMPOSITION](https://specifications.openehr.org/releases/SM/latest/openehr_platform.html#_i_ehr_composition_interface) Abstract Service Model interface.
")
public interface EhrApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /ehr/{ehr_id}/composition : Create COMPOSITION
     * Creates the first version of a new COMPOSITION in the EHR identified by &#x60;ehr_id&#x60;. 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @param composition The COMPOSITION.  (required)
     * @param prefer Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return&#x3D;minimal)
     * @return &#x60;201 Created&#x60; is returned when the COMPOSITION was created.  Content body is only returned when &#x60;Prefer&#x60; header has &#x60;return&#x3D;representation&#x60;, otherwise only headers are returned.  (status code 201)
     *         or &#x60;400 Bad Request&#x60; is returned when the request URL or body (if provided) could not be parsed or has invalid content (e.g. invalid &#x60;ehr_id&#x60;, or either the body of the request could not be read, or could not be converted to a valid COMPOSITION object).  (status code 400)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist.  (status code 404)
     *         or &#x60;422 Unprocessable Entity&#x60; is returned when the content could be converted to a COMPOSITION, but there are semantic validation errors, such as the underlying template is not known or is not validating the supplied COMPOSITION.  (status code 422)
     */
    @Operation(
        operationId = "compositionCreate",
        summary = "Create COMPOSITION",
        description = "Creates the first version of a new COMPOSITION in the EHR identified by `ehr_id`. ",
        tags = { "COMPOSITION" },
        responses = {
            @ApiResponse(responseCode = "201", description = "`201 Created` is returned when the COMPOSITION was created.  Content body is only returned when `Prefer` header has `return=representation`, otherwise only headers are returned. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Composition.class))
            }),
            @ApiResponse(responseCode = "400", description = "`400 Bad Request` is returned when the request URL or body (if provided) could not be parsed or has invalid content (e.g. invalid `ehr_id`, or either the body of the request could not be read, or could not be converted to a valid COMPOSITION object). ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist. "),
            @ApiResponse(responseCode = "422", description = "`422 Unprocessable Entity` is returned when the content could be converted to a COMPOSITION, but there are semantic validation errors, such as the underlying template is not known or is not validating the supplied COMPOSITION. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/ehr/{ehr_id}/composition",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Composition> compositionCreate(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId,
        @Parameter(name = "Composition", description = "The COMPOSITION. ", required = true) @Valid @RequestBody Composition composition,
        @Parameter(name = "Prefer", description = "Request header to indicate the preference over response details. The response will contain the entire resource when the `Prefer` header has a value of `return=representation`. ", in = ParameterIn.HEADER) @RequestHeader(value = "Prefer", required = false, defaultValue = "return=minimal") String prefer
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"archetype_node_id\" : \"openEHR-EHR-COMPOSITION.encounter.v1\", \"name\" : { \"value\" : \"Vital Signs\" }, \"uid\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1\" }, \"archetype_details\" : { \"archetype_id\" : { \"value\" : \"openEHR-EHR-COMPOSITION.encounter.v1\" }, \"template_id\" : { \"value\" : \"Example.v1::c7ec861c-c413-39ff-9965-a198ebf44747\" }, \"rm_version\" : \"1.0.2\" }, \"language\" : { \"terminology_id\" : { \"value\" : \"ISO_639-1\" }, \"code_string\" : \"en\" }, \"territory\" : { \"terminology_id\" : { \"value\" : \"ISO_3166-1\" }, \"code_string\" : \"NL\" }, \"category\" : { \"value\" : \"event\", \"defining_code\" : { \"terminology_id\" : { \"value\" : \"openehr\" }, \"code_string\" : \"433\" } }, \"composer\" : { \"_type\" : \"PARTY_IDENTIFIED\", \"external_ref\" : { \"id\" : { \"_type\" : \"GENERIC_ID\", \"value\" : \"16b74749-e6aa-4945-b760-b42bdc07098a\", \"scheme\" : \"pid\" }, \"namespace\" : \"openEHRSys.example.com\", \"type\" : \"PERSON\" }, \"name\" : \"A name\" }, \"context\" : { \"start_time\" : { \"value\" : \"2014-11-18T09:50:35.000+01:00\" }, \"setting\" : { \"value\" : \"other care\", \"defining_code\" : { \"terminology_id\" : { \"value\" : \"openehr\" }, \"code_string\" : \"238\" } } }, \"content\" : [ ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /ehr/{ehr_id}/composition/{uid_based_id} : Delete COMPOSITION
     * Deletes the COMPOSITION identified by &#x60;uid_based_id&#x60; and associated with the EHR identified by &#x60;ehr_id&#x60;.  The &#x60;uid_based_id&#x60; MUST be in a form of an OBJECT_VERSION_ID identifier taken from the last (most recent) VERSION.uid.value, representing the &#x60;preceding_version_uid&#x60; to be deleted. 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @param uidBasedId An identifier in a form of an OBJECT_VERSION_ID identifier taken from VERSION.uid.value (i.e. a &#x60;version_uid&#x60;).  (required)
     * @return &#x60;204 No Content&#x60; is returned when COMPOSITION was deleted.  (status code 204)
     *         or &#x60;400 Bad Request&#x60; is returned when the request URL could not be parsed (i.e. invalid format of request parameters) or when the resource identified by the request parameters is already deleted.  (status code 400)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist, or when the &#x60;uid_based_id&#x60; does not exist.  (status code 404)
     *         or &#x60;409 Conflict&#x60; is returned when supplied &#x60;uid_based_id&#x60; doesn&#39;t match the latest version. Returns also latest version in the &#x60;Location&#x60; and &#x60;ETag&#x60; headers.  (status code 409)
     */
    @Operation(
        operationId = "compositionDelete",
        summary = "Delete COMPOSITION",
        description = "Deletes the COMPOSITION identified by `uid_based_id` and associated with the EHR identified by `ehr_id`.  The `uid_based_id` MUST be in a form of an OBJECT_VERSION_ID identifier taken from the last (most recent) VERSION.uid.value, representing the `preceding_version_uid` to be deleted. ",
        tags = { "COMPOSITION" },
        responses = {
            @ApiResponse(responseCode = "204", description = "`204 No Content` is returned when COMPOSITION was deleted. "),
            @ApiResponse(responseCode = "400", description = "`400 Bad Request` is returned when the request URL could not be parsed (i.e. invalid format of request parameters) or when the resource identified by the request parameters is already deleted. "),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when the `uid_based_id` does not exist. "),
            @ApiResponse(responseCode = "409", description = "`409 Conflict` is returned when supplied `uid_based_id` doesn't match the latest version. Returns also latest version in the `Location` and `ETag` headers. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/ehr/{ehr_id}/composition/{uid_based_id}"
    )
    default ResponseEntity<Void> compositionDelete(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId,
        @Parameter(name = "uid_based_id", description = "An identifier in a form of an OBJECT_VERSION_ID identifier taken from VERSION.uid.value (i.e. a `version_uid`). ", required = true, in = ParameterIn.PATH) @PathVariable("uid_based_id") String uidBasedId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ehr/{ehr_id}/composition/{uid_based_id} : Get COMPOSITION
     * Retrieves a version of the COMPOSITION identified by &#x60;uid_based_id&#x60; and associated with the EHR identified by &#x60;ehr_id&#x60;.  The &#x60;uid_based_id&#x60; can take a form of an OBJECT_VERSION_ID identifier taken from VERSION.uid.value (i.e. a &#x60;version_uid&#x60;), or a form of a HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a &#x60;versioned_object_uid&#x60;). The former is used to retrieve a specific known version of the COMPOSITION (e.g. one identified by &#x60;8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1&#x60;), whereas the later (e.g. an identifier like &#x60;8849182c-82ad-4088-a07f-48ead4180515&#x60;) is be used to retrieve a version from the version container whenever the _version_tree_id_ is unknown or irrelevant (such as when most recent version is requested).  When the &#x60;uid_based_id&#x60; has the form of a HIER_OBJECT_ID, if the &#x60;version_at_time&#x60; is supplied, retrieves the version extant _at specified time_, otherwise retrieves the _latest_ COMPOSITION version.  See [Resource identification](overview.html#tag/Resources/Resource-identification) for more details about the identifiers usage and meaning. 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @param uidBasedId An abstract identifier: it can take a form of an OBJECT_VERSION_ID identifier taken from VERSION.uid.value (i.e. a &#x60;version_uid&#x60;), or a form of a HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a &#x60;versioned_object_uid&#x60;).  (required)
     * @param versionAtTime A given time in the extended ISO 8601 format.  (optional)
     * @return &#x60;200 OK&#x60; is returned when the requested COMPOSITION is successfully retrieved.  (status code 200)
     *         or &#x60;204 No Content&#x60; is returned when the resource identified by the request parameters (at specified &#x60;version_at_time&#x60;) time has been deleted.  (status code 204)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist, or when a version of the resource identified by the request parameters (at specified &#x60;version_at_time&#x60;) does not exist.  (status code 404)
     */
    @Operation(
        operationId = "compositionGet",
        summary = "Get COMPOSITION",
        description = "Retrieves a version of the COMPOSITION identified by `uid_based_id` and associated with the EHR identified by `ehr_id`.  The `uid_based_id` can take a form of an OBJECT_VERSION_ID identifier taken from VERSION.uid.value (i.e. a `version_uid`), or a form of a HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a `versioned_object_uid`). The former is used to retrieve a specific known version of the COMPOSITION (e.g. one identified by `8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1`), whereas the later (e.g. an identifier like `8849182c-82ad-4088-a07f-48ead4180515`) is be used to retrieve a version from the version container whenever the _version_tree_id_ is unknown or irrelevant (such as when most recent version is requested).  When the `uid_based_id` has the form of a HIER_OBJECT_ID, if the `version_at_time` is supplied, retrieves the version extant _at specified time_, otherwise retrieves the _latest_ COMPOSITION version.  See [Resource identification](overview.html#tag/Resources/Resource-identification) for more details about the identifiers usage and meaning. ",
        tags = { "COMPOSITION" },
        responses = {
            @ApiResponse(responseCode = "200", description = "`200 OK` is returned when the requested COMPOSITION is successfully retrieved. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Composition.class))
            }),
            @ApiResponse(responseCode = "204", description = "`204 No Content` is returned when the resource identified by the request parameters (at specified `version_at_time`) time has been deleted. "),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when a version of the resource identified by the request parameters (at specified `version_at_time`) does not exist. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ehr/{ehr_id}/composition/{uid_based_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Composition> compositionGet(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId,
        @Parameter(name = "uid_based_id", description = "An abstract identifier: it can take a form of an OBJECT_VERSION_ID identifier taken from VERSION.uid.value (i.e. a `version_uid`), or a form of a HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a `versioned_object_uid`). ", required = true, in = ParameterIn.PATH) @PathVariable("uid_based_id") String uidBasedId,
        @Parameter(name = "version_at_time", description = "A given time in the extended ISO 8601 format. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version_at_time", required = false) String versionAtTime
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"archetype_node_id\" : \"openEHR-EHR-COMPOSITION.encounter.v1\", \"name\" : { \"value\" : \"Vital Signs\" }, \"uid\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1\" }, \"archetype_details\" : { \"archetype_id\" : { \"value\" : \"openEHR-EHR-COMPOSITION.encounter.v1\" }, \"template_id\" : { \"value\" : \"Example.v1::c7ec861c-c413-39ff-9965-a198ebf44747\" }, \"rm_version\" : \"1.0.2\" }, \"language\" : { \"terminology_id\" : { \"value\" : \"ISO_639-1\" }, \"code_string\" : \"en\" }, \"territory\" : { \"terminology_id\" : { \"value\" : \"ISO_3166-1\" }, \"code_string\" : \"NL\" }, \"category\" : { \"value\" : \"event\", \"defining_code\" : { \"terminology_id\" : { \"value\" : \"openehr\" }, \"code_string\" : \"433\" } }, \"composer\" : { \"_type\" : \"PARTY_IDENTIFIED\", \"external_ref\" : { \"id\" : { \"_type\" : \"GENERIC_ID\", \"value\" : \"16b74749-e6aa-4945-b760-b42bdc07098a\", \"scheme\" : \"pid\" }, \"namespace\" : \"openEHRSys.example.com\", \"type\" : \"PERSON\" }, \"name\" : \"A name\" }, \"context\" : { \"start_time\" : { \"value\" : \"2014-11-18T09:50:35.000+01:00\" }, \"setting\" : { \"value\" : \"other care\", \"defining_code\" : { \"terminology_id\" : { \"value\" : \"openehr\" }, \"code_string\" : \"238\" } } }, \"content\" : [ ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /ehr/{ehr_id}/composition/{uid_based_id} : Update COMPOSITION
     * Updates COMPOSITION identified by &#x60;uid_based_id&#x60; and associated with the EHR identified by &#x60;ehr_id&#x60;.  The &#x60;uid_based_id&#x60; can take only a form of an HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a &#x60;versioned_object_uid&#x60;).  If the request body already contains a COMPOSITION.uid.value, it must match the &#x60;uid_based_id&#x60; in the URL.   The existing latest &#x60;version_uid&#x60; of COMPOSITION resource (i.e. the &#x60;preceding_version_uid&#x60;) must be specified in the &#x60;If-Match&#x60; header. 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @param uidBasedId An identifier in a form of a HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a &#x60;versioned_object_uid&#x60;).  (required)
     * @param ifMatch Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#39;s value.  (required)
     * @param composition The new COMPOSITION.  (required)
     * @param prefer Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return&#x3D;minimal)
     * @return &#x60;200 OK&#x60; is returned when the COMPOSITION is successfully updated and the updated resource is returned in the body when &#x60;Prefer&#x60; header value is &#x60;return&#x3D;representation&#x60;.  (status code 200)
     *         or &#x60;400 Bad Request&#x60; is returned when the request URL or body (if provided) could not be parsed or has invalid content (e.g. invalid &#x60;ehr_id&#x60;, or either the body of the request could not be read, or could not be converted to a valid COMPOSITION object).  (status code 400)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist, or when the &#x60;uid_based_id&#x60; does not exist.  (status code 404)
     *         or &#x60;412 Precondition Failed&#x60; is returned when &#x60;If-Match&#x60; request header doesn&#39;t match the latest version on the service side. Returns also latest &#x60;version_uid&#x60; in the &#x60;Location&#x60; and &#x60;ETag&#x60; headers.  (status code 412)
     *         or &#x60;422 Unprocessable Entity&#x60; is returned when the content could be converted to a COMPOSITION, but there are semantic validation errors, such as the underlying template is not known or is not validating the supplied COMPOSITION.  (status code 422)
     */
    @Operation(
        operationId = "compositionUpdate",
        summary = "Update COMPOSITION",
        description = "Updates COMPOSITION identified by `uid_based_id` and associated with the EHR identified by `ehr_id`.  The `uid_based_id` can take only a form of an HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a `versioned_object_uid`).  If the request body already contains a COMPOSITION.uid.value, it must match the `uid_based_id` in the URL.   The existing latest `version_uid` of COMPOSITION resource (i.e. the `preceding_version_uid`) must be specified in the `If-Match` header. ",
        tags = { "COMPOSITION" },
        responses = {
            @ApiResponse(responseCode = "200", description = "`200 OK` is returned when the COMPOSITION is successfully updated and the updated resource is returned in the body when `Prefer` header value is `return=representation`. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Composition.class))
            }),
            @ApiResponse(responseCode = "400", description = "`400 Bad Request` is returned when the request URL or body (if provided) could not be parsed or has invalid content (e.g. invalid `ehr_id`, or either the body of the request could not be read, or could not be converted to a valid COMPOSITION object). ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when the `uid_based_id` does not exist. "),
            @ApiResponse(responseCode = "412", description = "`412 Precondition Failed` is returned when `If-Match` request header doesn't match the latest version on the service side. Returns also latest `version_uid` in the `Location` and `ETag` headers. "),
            @ApiResponse(responseCode = "422", description = "`422 Unprocessable Entity` is returned when the content could be converted to a COMPOSITION, but there are semantic validation errors, such as the underlying template is not known or is not validating the supplied COMPOSITION. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/ehr/{ehr_id}/composition/{uid_based_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Composition> compositionUpdate(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId,
        @Parameter(name = "uid_based_id", description = "An identifier in a form of a HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a `versioned_object_uid`). ", required = true, in = ParameterIn.PATH) @PathVariable("uid_based_id") String uidBasedId,
        @NotNull @Parameter(name = "If-Match", description = "Header to make the request conditional.  Together with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\"). The format is always an `version_uid` identifier enclosed by double quotes. The operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value. ", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "If-Match", required = true) String ifMatch,
        @Parameter(name = "Composition", description = "The new COMPOSITION. ", required = true) @Valid @RequestBody Composition composition,
        @Parameter(name = "Prefer", description = "Request header to indicate the preference over response details. The response will contain the entire resource when the `Prefer` header has a value of `return=representation`. ", in = ParameterIn.HEADER) @RequestHeader(value = "Prefer", required = false, defaultValue = "return=minimal") String prefer
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"archetype_node_id\" : \"openEHR-EHR-COMPOSITION.encounter.v1\", \"name\" : { \"value\" : \"Vital Signs\" }, \"uid\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1\" }, \"archetype_details\" : { \"archetype_id\" : { \"value\" : \"openEHR-EHR-COMPOSITION.encounter.v1\" }, \"template_id\" : { \"value\" : \"Example.v1::c7ec861c-c413-39ff-9965-a198ebf44747\" }, \"rm_version\" : \"1.0.2\" }, \"language\" : { \"terminology_id\" : { \"value\" : \"ISO_639-1\" }, \"code_string\" : \"en\" }, \"territory\" : { \"terminology_id\" : { \"value\" : \"ISO_3166-1\" }, \"code_string\" : \"NL\" }, \"category\" : { \"value\" : \"event\", \"defining_code\" : { \"terminology_id\" : { \"value\" : \"openehr\" }, \"code_string\" : \"433\" } }, \"composer\" : { \"_type\" : \"PARTY_IDENTIFIED\", \"external_ref\" : { \"id\" : { \"_type\" : \"GENERIC_ID\", \"value\" : \"16b74749-e6aa-4945-b760-b42bdc07098a\", \"scheme\" : \"pid\" }, \"namespace\" : \"openEHRSys.example.com\", \"type\" : \"PERSON\" }, \"name\" : \"A name\" }, \"context\" : { \"start_time\" : { \"value\" : \"2014-11-18T09:50:35.000+01:00\" }, \"setting\" : { \"value\" : \"other care\", \"defining_code\" : { \"terminology_id\" : { \"value\" : \"openehr\" }, \"code_string\" : \"238\" } } }, \"content\" : [ ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /ehr/{ehr_id}/contribution : Create CONTRIBUTION
     * We will use the relaxed CONTRIBUTION with the following optional attributes:   - &#x60;uid&#x60;: when provided, it will be accepted in case is not in-use, otherwise error will be returned   - &#x60;audit.time_committed&#x60;: server will always set it   - &#x60;audit.system_id&#x60;: when provided, it will be validated 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @param newContribution The CONTRIBUTION.  (required)
     * @param prefer Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return&#x3D;minimal)
     * @return &#x60;201 Created&#x60; is returned when the CONTRIBUTION was created.  Content body is only returned when &#x60;Prefer&#x60; header has &#x60;return&#x3D;representation&#x60;, otherwise only headers are returned.  (status code 201)
     *         or &#x60;400 Bad Request&#x60; is returned when the request URL or body could not be parsed or has invalid content (e.g. invalid &#x60;ehr_id&#x60;, or either the body of the request not be converted to a valid CONTRIBUTION object, or the modification type doesn’t match the operation - i.e. first version of a composition with MODIFICATION).  (status code 400)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist.  (status code 404)
     *         or &#x60;409 Conflict&#x60; is returned when a resource with same identifier(s) already exists.  (status code 409)
     */
    @Operation(
        operationId = "contributionCreate",
        summary = "Create CONTRIBUTION",
        description = "We will use the relaxed CONTRIBUTION with the following optional attributes:   - `uid`: when provided, it will be accepted in case is not in-use, otherwise error will be returned   - `audit.time_committed`: server will always set it   - `audit.system_id`: when provided, it will be validated ",
        tags = { "CONTRIBUTION" },
        responses = {
            @ApiResponse(responseCode = "201", description = "`201 Created` is returned when the CONTRIBUTION was created.  Content body is only returned when `Prefer` header has `return=representation`, otherwise only headers are returned. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Contribution.class))
            }),
            @ApiResponse(responseCode = "400", description = "`400 Bad Request` is returned when the request URL or body could not be parsed or has invalid content (e.g. invalid `ehr_id`, or either the body of the request not be converted to a valid CONTRIBUTION object, or the modification type doesn’t match the operation - i.e. first version of a composition with MODIFICATION). ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist. "),
            @ApiResponse(responseCode = "409", description = "`409 Conflict` is returned when a resource with same identifier(s) already exists. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/ehr/{ehr_id}/contribution",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Contribution> contributionCreate(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId,
        @Parameter(name = "NewContribution", description = "The CONTRIBUTION. ", required = true) @Valid @RequestBody NewContribution newContribution,
        @Parameter(name = "Prefer", description = "Request header to indicate the preference over response details. The response will contain the entire resource when the `Prefer` header has a value of `return=representation`. ", in = ParameterIn.HEADER) @RequestHeader(value = "Prefer", required = false, defaultValue = "return=minimal") String prefer
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"uid\" : { \"value\" : \"0826851c-c4c2-4d61-92b9-410fb8275ff0\" }, \"versions\" : [ { \"_type\" : \"OBJECT_REF\", \"id\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"fb458d9c-1323-42bc-b7f8-787f3660a0b5::openEHRSys.example.com::1\" }, \"namespace\" : \"local\", \"type\" : \"COMPOSITION\" }, { \"_type\" : \"OBJECT_REF\", \"id\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"abcdefgh-1323-42bc-b7f8-787f3660a0ba::openEHRSys.example.com::1\" }, \"namespace\" : \"local\", \"type\" : \"FOLDER\" } ], \"audit\" : { \"system_id\" : \"9624982A-9F42-41A5-9318-AE13D5F5031F\", \"committer\" : { \"_type\" : \"PARTY_IDENTIFIED\", \"name\" : \"A user name\" }, \"time_committed\" : { \"value\" : \"2017-08-15T10:37:15.422+02:00\" }, \"change_type\" : { \"value\" : \"creation\", \"defining_code\" : { \"terminology_id\" : { \"value\" : \"openehr\" }, \"code_string\" : \"249\" } }, \"description\" : { \"value\" : \"Description text\" } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ehr/{ehr_id}/contribution/{contribution_uid} : Get CONTRIBUTION by id
     * Retrieves a CONTRIBUTION identified by &#x60;contribution_uid&#x60; and associated with the EHR identified by &#x60;ehr_id&#x60;. 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @param contributionUid The CONTRIBUTION uid.  (required)
     * @return &#x60;200 OK&#x60; is returned when the CONTRIBUTION is successfully retrieved.  (status code 200)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist, or when a CONTRIBUTION with &#x60;contribution_uid&#x60; does not exist.  (status code 404)
     */
    @Operation(
        operationId = "contributionGet",
        summary = "Get CONTRIBUTION by id",
        description = "Retrieves a CONTRIBUTION identified by `contribution_uid` and associated with the EHR identified by `ehr_id`. ",
        tags = { "CONTRIBUTION" },
        responses = {
            @ApiResponse(responseCode = "200", description = "`200 OK` is returned when the CONTRIBUTION is successfully retrieved. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Contribution.class))
            }),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when a CONTRIBUTION with `contribution_uid` does not exist. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ehr/{ehr_id}/contribution/{contribution_uid}",
        produces = { "application/json" }
    )
    default ResponseEntity<Contribution> contributionGet(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId,
        @Parameter(name = "contribution_uid", description = "The CONTRIBUTION uid. ", required = true, in = ParameterIn.PATH) @PathVariable("contribution_uid") String contributionUid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"uid\" : { \"value\" : \"0826851c-c4c2-4d61-92b9-410fb8275ff0\" }, \"versions\" : [ { \"_type\" : \"OBJECT_REF\", \"id\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"fb458d9c-1323-42bc-b7f8-787f3660a0b5::openEHRSys.example.com::1\" }, \"namespace\" : \"local\", \"type\" : \"COMPOSITION\" }, { \"_type\" : \"OBJECT_REF\", \"id\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"abcdefgh-1323-42bc-b7f8-787f3660a0ba::openEHRSys.example.com::1\" }, \"namespace\" : \"local\", \"type\" : \"FOLDER\" } ], \"audit\" : { \"system_id\" : \"9624982A-9F42-41A5-9318-AE13D5F5031F\", \"committer\" : { \"_type\" : \"PARTY_IDENTIFIED\", \"name\" : \"A user name\" }, \"time_committed\" : { \"value\" : \"2017-08-15T10:37:15.422+02:00\" }, \"change_type\" : { \"value\" : \"creation\", \"defining_code\" : { \"terminology_id\" : { \"value\" : \"openehr\" }, \"code_string\" : \"249\" } }, \"description\" : { \"value\" : \"Description text\" } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /ehr/{ehr_id}/directory : Create directory
     * Creates a new directory FOLDER associated with the EHR identified by &#x60;ehr_id&#x60;. 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @param folder The directory.  (required)
     * @param prefer Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return&#x3D;minimal)
     * @return &#x60;201 Created&#x60; is returned when the FOLDER was created.  Content body is only returned when &#x60;Prefer&#x60; header has &#x60;return&#x3D;representation&#x60;, otherwise only headers are returned.  (status code 201)
     *         or &#x60;400 Bad Request&#x60; is returned when the request URL or body (if provided) could not be parsed or has invalid content (e.g. invalid &#x60;ehr_id&#x60;, or either the body of the request could not be read, or could not be converted to a valid FOLDER object).  (status code 400)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist.  (status code 404)
     */
    @Operation(
        operationId = "directoryCreate",
        summary = "Create directory",
        description = "Creates a new directory FOLDER associated with the EHR identified by `ehr_id`. ",
        tags = { "DIRECTORY" },
        responses = {
            @ApiResponse(responseCode = "201", description = "`201 Created` is returned when the FOLDER was created.  Content body is only returned when `Prefer` header has `return=representation`, otherwise only headers are returned. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Folder.class))
            }),
            @ApiResponse(responseCode = "400", description = "`400 Bad Request` is returned when the request URL or body (if provided) could not be parsed or has invalid content (e.g. invalid `ehr_id`, or either the body of the request could not be read, or could not be converted to a valid FOLDER object). "),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/ehr/{ehr_id}/directory",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Folder> directoryCreate(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId,
        @Parameter(name = "Folder", description = "The directory. ", required = true) @Valid @RequestBody Folder folder,
        @Parameter(name = "Prefer", description = "Request header to indicate the preference over response details. The response will contain the entire resource when the `Prefer` header has a value of `return=representation`. ", in = ParameterIn.HEADER) @RequestHeader(value = "Prefer", required = false, defaultValue = "return=minimal") String prefer
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"archetype_node_id\" : \"openEHR-EHR-FOLDER.directory.v1\", \"name\" : { \"value\" : \"Directory\" }, \"uid\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1\" }, \"items\" : [ ], \"folders\" : [ ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /ehr/{ehr_id}/directory : Delete directory
     * Deletes directory FOLDER associated with the EHR identified by &#x60;ehr_id&#x60;.  The existing latest &#x60;version_uid&#x60; of directory FOLDER resource (i.e. the &#x60;preceding_version_uid&#x60;) must be specified in the &#x60;If-Match&#x60; header. 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @param ifMatch Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#39;s value.  (required)
     * @return &#x60;204 No Content&#x60; is returned when the resource identified by the request parameters has been (logically) deleted.  (status code 204)
     *         or &#x60;400 Bad Request&#x60; is returned when the request has invalid &#x60;ehr_id&#x60;.  (status code 400)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist.  (status code 404)
     *         or &#x60;412 Precondition Failed&#x60; is returned when &#x60;If-Match&#x60; request header doesn&#39;t match the latest version on the service side. Returns also latest &#x60;version_uid&#x60; in the &#x60;Location&#x60; and &#x60;ETag&#x60; headers.  (status code 412)
     */
    @Operation(
        operationId = "directoryDelete",
        summary = "Delete directory",
        description = "Deletes directory FOLDER associated with the EHR identified by `ehr_id`.  The existing latest `version_uid` of directory FOLDER resource (i.e. the `preceding_version_uid`) must be specified in the `If-Match` header. ",
        tags = { "DIRECTORY" },
        responses = {
            @ApiResponse(responseCode = "204", description = "`204 No Content` is returned when the resource identified by the request parameters has been (logically) deleted. "),
            @ApiResponse(responseCode = "400", description = "`400 Bad Request` is returned when the request has invalid `ehr_id`. "),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist. "),
            @ApiResponse(responseCode = "412", description = "`412 Precondition Failed` is returned when `If-Match` request header doesn't match the latest version on the service side. Returns also latest `version_uid` in the `Location` and `ETag` headers. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/ehr/{ehr_id}/directory"
    )
    default ResponseEntity<Void> directoryDelete(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId,
        @NotNull @Parameter(name = "If-Match", description = "Header to make the request conditional.  Together with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\"). The format is always an `version_uid` identifier enclosed by double quotes. The operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value. ", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "If-Match", required = true) String ifMatch
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ehr/{ehr_id}/directory : Get folder in directory version at time
     * Retrieves the version of the directory FOLDER associated with the EHR identified by &#x60;ehr_id&#x60;.  If &#x60;version_at_time&#x60; is supplied, retrieves the version extant _at specified time_, otherwise retrieves the _latest_ directory FOLDER version.   If &#x60;path&#x60; is supplied, retrieves from the directory only the sub-FOLDER that is associated with that path. 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @param versionAtTime A given time in the extended ISO 8601 format.  (optional)
     * @param path A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.  (optional)
     * @return &#x60;200 OK&#x60; is returned when the FOLDER is successfully retrieved.  (status code 200)
     *         or &#x60;204 No Content&#x60; is returned when the resource identified by the request parameters (at specified &#x60;version_at_time&#x60;) time has been deleted.  (status code 204)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist, or when a directory does not exist at the specified &#x60;version_at_time&#x60;, or when &#x60;path&#x60; does not exists within the directory.  (status code 404)
     */
    @Operation(
        operationId = "directoryGetAtTime",
        summary = "Get folder in directory version at time",
        description = "Retrieves the version of the directory FOLDER associated with the EHR identified by `ehr_id`.  If `version_at_time` is supplied, retrieves the version extant _at specified time_, otherwise retrieves the _latest_ directory FOLDER version.   If `path` is supplied, retrieves from the directory only the sub-FOLDER that is associated with that path. ",
        tags = { "DIRECTORY" },
        responses = {
            @ApiResponse(responseCode = "200", description = "`200 OK` is returned when the FOLDER is successfully retrieved. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Folder.class))
            }),
            @ApiResponse(responseCode = "204", description = "`204 No Content` is returned when the resource identified by the request parameters (at specified `version_at_time`) time has been deleted. "),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when a directory does not exist at the specified `version_at_time`, or when `path` does not exists within the directory. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ehr/{ehr_id}/directory",
        produces = { "application/json" }
    )
    default ResponseEntity<Folder> directoryGetAtTime(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId,
        @Parameter(name = "version_at_time", description = "A given time in the extended ISO 8601 format. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version_at_time", required = false) String versionAtTime,
        @Parameter(name = "path", description = "A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "path", required = false) String path
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"archetype_node_id\" : \"openEHR-EHR-FOLDER.directory.v1\", \"name\" : { \"value\" : \"Directory\" }, \"uid\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1\" }, \"items\" : [ ], \"folders\" : [ ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ehr/{ehr_id}/directory/{version_uid} : Get folder in directory version
     * Retrieves a particular version of the directory FOLDER identified by &#x60;version_uid&#x60; and associated with the EHR identified by &#x60;ehr_id&#x60;.  If &#x60;path&#x60; is supplied, retrieves from the directory only the sub-FOLDER that is associated with that path. 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @param versionUid VERSION identifier taken from VERSION.uid.value.  (required)
     * @param path A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.  (optional)
     * @return &#x60;200 OK&#x60; is returned when the FOLDER is successfully retrieved.  (status code 200)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist, or when a directory with &#x60;version_uid&#x60; does not exist, or when &#x60;path&#x60; does not exist within the directory.  (status code 404)
     */
    @Operation(
        operationId = "directoryGetByVersionId",
        summary = "Get folder in directory version",
        description = "Retrieves a particular version of the directory FOLDER identified by `version_uid` and associated with the EHR identified by `ehr_id`.  If `path` is supplied, retrieves from the directory only the sub-FOLDER that is associated with that path. ",
        tags = { "DIRECTORY" },
        responses = {
            @ApiResponse(responseCode = "200", description = "`200 OK` is returned when the FOLDER is successfully retrieved. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Folder.class))
            }),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when a directory with `version_uid` does not exist, or when `path` does not exist within the directory. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ehr/{ehr_id}/directory/{version_uid}",
        produces = { "application/json" }
    )
    default ResponseEntity<Folder> directoryGetByVersionId(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId,
        @Parameter(name = "version_uid", description = "VERSION identifier taken from VERSION.uid.value. ", required = true, in = ParameterIn.PATH) @PathVariable("version_uid") String versionUid,
        @Parameter(name = "path", description = "A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "path", required = false) String path
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"archetype_node_id\" : \"openEHR-EHR-FOLDER.directory.v1\", \"name\" : { \"value\" : \"Directory\" }, \"uid\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1\" }, \"items\" : [ ], \"folders\" : [ ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /ehr/{ehr_id}/directory : Update directory
     * Updates directory FOLDER associated with the EHR identified by &#x60;ehr_id&#x60;.  The existing latest &#x60;version_uid&#x60; of directory FOLDER resource (i.e. the &#x60;preceding_version_uid&#x60;) must be specified in the &#x60;If-Match&#x60; header. 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @param ifMatch Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#39;s value.  (required)
     * @param folder The new directory.  (required)
     * @param prefer Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return&#x3D;minimal)
     * @return &#x60;200 OK&#x60; is returned when directory was successfully updated and the updated resource is returned in the body when &#x60;Prefer&#x60; header value is &#x60;return&#x3D;representation&#x60;.  (status code 200)
     *         or &#x60;204 No Content&#x60; is returned when directory was updated and &#x60;Prefer&#x60; header is missing or is set to &#x60;return&#x3D;minimal&#x60;.  (status code 204)
     *         or &#x60;400 Bad Request&#x60; is returned when the request URL or body (if provided) could not be parsed or has invalid content (e.g. invalid &#x60;ehr_id&#x60;, or either the body of the request could not be read, or could not be converted to a valid FOLDER object).  (status code 400)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist.  (status code 404)
     *         or &#x60;412 Precondition Failed&#x60; is returned when &#x60;If-Match&#x60; request header doesn&#39;t match the latest version on the service side. Returns also latest &#x60;version_uid&#x60; in the &#x60;Location&#x60; and &#x60;ETag&#x60; headers.  (status code 412)
     */
    @Operation(
        operationId = "directoryUpdate",
        summary = "Update directory",
        description = "Updates directory FOLDER associated with the EHR identified by `ehr_id`.  The existing latest `version_uid` of directory FOLDER resource (i.e. the `preceding_version_uid`) must be specified in the `If-Match` header. ",
        tags = { "DIRECTORY" },
        responses = {
            @ApiResponse(responseCode = "200", description = "`200 OK` is returned when directory was successfully updated and the updated resource is returned in the body when `Prefer` header value is `return=representation`. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Folder.class))
            }),
            @ApiResponse(responseCode = "204", description = "`204 No Content` is returned when directory was updated and `Prefer` header is missing or is set to `return=minimal`. "),
            @ApiResponse(responseCode = "400", description = "`400 Bad Request` is returned when the request URL or body (if provided) could not be parsed or has invalid content (e.g. invalid `ehr_id`, or either the body of the request could not be read, or could not be converted to a valid FOLDER object). "),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist. "),
            @ApiResponse(responseCode = "412", description = "`412 Precondition Failed` is returned when `If-Match` request header doesn't match the latest version on the service side. Returns also latest `version_uid` in the `Location` and `ETag` headers. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/ehr/{ehr_id}/directory",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Folder> directoryUpdate(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId,
        @NotNull @Parameter(name = "If-Match", description = "Header to make the request conditional.  Together with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\"). The format is always an `version_uid` identifier enclosed by double quotes. The operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value. ", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "If-Match", required = true) String ifMatch,
        @Parameter(name = "Folder", description = "The new directory. ", required = true) @Valid @RequestBody Folder folder,
        @Parameter(name = "Prefer", description = "Request header to indicate the preference over response details. The response will contain the entire resource when the `Prefer` header has a value of `return=representation`. ", in = ParameterIn.HEADER) @RequestHeader(value = "Prefer", required = false, defaultValue = "return=minimal") String prefer
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"archetype_node_id\" : \"openEHR-EHR-FOLDER.directory.v1\", \"name\" : { \"value\" : \"Directory\" }, \"uid\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1\" }, \"items\" : [ ], \"folders\" : [ ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /ehr : Create EHR
     * Create a new &#x60;EHR&#x60; with an auto-generated identifier.  An EHR_STATUS resource needs to be always created and committed in the new EHR. This resource MAY be also supplied by the client as the request body.  If not supplied, a default EHR_STATUS will be used by the service with following attributes:   - &#x60;is_queryable&#x60;: true   - &#x60;is_modifiable&#x60;: true   - &#x60;subject&#x60;: a PARTY_SELF object  All other required EHR attributes and resources will be automatically created as needed by the [EHR creation semantics](https://specifications.openehr.org/releases/RM/latest/ehr.html#_ehr_creation_semantics). 
     *
     * @param prefer Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return&#x3D;minimal)
     * @param ehrStatus An EHR_STATUS resource MAY be also supplied by the client as the request body.  (optional)
     * @return &#x60;201 Created&#x60; is returned when the EHR has been successfully created.  The new EHR resource is returned in the body when the request&#39;s &#x60;Prefer&#x60; header value is &#x60;return&#x3D;representation&#x60;, otherwise only headers are returned.  (status code 201)
     *         or &#x60;400 Bad Request&#x60; is returned when the request URL or body (if provided) could not be parsed or has invalid content.  (status code 400)
     *         or &#x60;409 Conflict&#x60; Unable to create a new EHR due to a conflict with an already existing EHR with the same subject id, namespace pair, whenever EHR_STATUS is supplied.  (status code 409)
     */
    @Operation(
        operationId = "ehrCreate",
        summary = "Create EHR",
        description = "Create a new `EHR` with an auto-generated identifier.  An EHR_STATUS resource needs to be always created and committed in the new EHR. This resource MAY be also supplied by the client as the request body.  If not supplied, a default EHR_STATUS will be used by the service with following attributes:   - `is_queryable`: true   - `is_modifiable`: true   - `subject`: a PARTY_SELF object  All other required EHR attributes and resources will be automatically created as needed by the [EHR creation semantics](https://specifications.openehr.org/releases/RM/latest/ehr.html#_ehr_creation_semantics). ",
        tags = { "EHR" },
        responses = {
            @ApiResponse(responseCode = "201", description = "`201 Created` is returned when the EHR has been successfully created.  The new EHR resource is returned in the body when the request's `Prefer` header value is `return=representation`, otherwise only headers are returned. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Ehr.class))
            }),
            @ApiResponse(responseCode = "400", description = "`400 Bad Request` is returned when the request URL or body (if provided) could not be parsed or has invalid content. "),
            @ApiResponse(responseCode = "409", description = "`409 Conflict` Unable to create a new EHR due to a conflict with an already existing EHR with the same subject id, namespace pair, whenever EHR_STATUS is supplied. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/ehr",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Ehr> ehrCreate(
        @Parameter(name = "Prefer", description = "Request header to indicate the preference over response details. The response will contain the entire resource when the `Prefer` header has a value of `return=representation`. ", in = ParameterIn.HEADER) @RequestHeader(value = "Prefer", required = false, defaultValue = "return=minimal") String prefer,
        @Parameter(name = "EhrStatus", description = "An EHR_STATUS resource MAY be also supplied by the client as the request body. ") @Valid @RequestBody(required = false) EhrStatus ehrStatus
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"system_id\" : { \"value\" : \"9624982A-9F42-41A5-9318-AE13D5F5031F\" }, \"ehr_id\" : { \"value\" : \"7d44b88c-4199-4bad-97dc-d78268e01398\" }, \"ehr_status\" : { \"id\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1\" }, \"namespace\" : \"local\", \"type\" : \"EHR_STATUS\" }, \"ehr_access\" : { \"id\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"59a8d0ac-140e-4feb-b2d6-af99f8e68af8::openEHRSys.example.com::1\" }, \"namespace\" : \"local\", \"type\" : \"EHR_ACCESS\" }, \"time_created\" : { \"value\" : \"2015-01-20T19:30:22.765+01:00\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /ehr/{ehr_id} : Create EHR with id
     * Create a new EHR with the specified &#x60;ehr_id&#x60; identifier.  The value of the &#x60;ehr_id&#x60; unique identifier MUST be valid [HIER_OBJECT_ID](https://specifications.openehr.org/releases/BASE/latest/base_types.html#_hier_object_id_class) value.  It is strongly RECOMMENDED that an UUID always be used for this.  An EHR_STATUS resource needs to be always created and committed in the new EHR. This resource MAY be also supplied by the client as the request body.  If not supplied, a default EHR_STATUS will be used by the service with following attributes:   - &#x60;is_queryable&#x60;: true   - &#x60;is_modifiable&#x60;: true   - &#x60;subject&#x60;: a PARTY_SELF object  All other required EHR attributes and resources will be automatically created as needed by the [EHR creation semantics](https://specifications.openehr.org/releases/RM/latest/ehr.html#_ehr_creation_semantics). 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @param prefer Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return&#x3D;minimal)
     * @param ehrStatus An EHR_STATUS resource MAY be also supplied by the client as the request body.  (optional)
     * @return &#x60;201 Created&#x60; is returned when the EHR has been successfully created.  The new EHR resource is returned in the body when the request&#39;s &#x60;Prefer&#x60; header value is &#x60;return&#x3D;representation&#x60;, otherwise only headers are returned.  (status code 201)
     *         or &#x60;400 Bad Request&#x60; is returned when the request URL or body (if provided) could not be parsed or has invalid content.  (status code 400)
     *         or &#x60;409 Conflict&#x60; Unable to create a new EHR due to a conflict with an already existing EHR.  Can happen when the supplied &#x60;ehr_id&#x60; is already used by an existing EHR.  (status code 409)
     */
    @Operation(
        operationId = "ehrCreateWithId",
        summary = "Create EHR with id",
        description = "Create a new EHR with the specified `ehr_id` identifier.  The value of the `ehr_id` unique identifier MUST be valid [HIER_OBJECT_ID](https://specifications.openehr.org/releases/BASE/latest/base_types.html#_hier_object_id_class) value.  It is strongly RECOMMENDED that an UUID always be used for this.  An EHR_STATUS resource needs to be always created and committed in the new EHR. This resource MAY be also supplied by the client as the request body.  If not supplied, a default EHR_STATUS will be used by the service with following attributes:   - `is_queryable`: true   - `is_modifiable`: true   - `subject`: a PARTY_SELF object  All other required EHR attributes and resources will be automatically created as needed by the [EHR creation semantics](https://specifications.openehr.org/releases/RM/latest/ehr.html#_ehr_creation_semantics). ",
        tags = { "EHR" },
        responses = {
            @ApiResponse(responseCode = "201", description = "`201 Created` is returned when the EHR has been successfully created.  The new EHR resource is returned in the body when the request's `Prefer` header value is `return=representation`, otherwise only headers are returned. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Ehr.class))
            }),
            @ApiResponse(responseCode = "400", description = "`400 Bad Request` is returned when the request URL or body (if provided) could not be parsed or has invalid content. "),
            @ApiResponse(responseCode = "409", description = "`409 Conflict` Unable to create a new EHR due to a conflict with an already existing EHR.  Can happen when the supplied `ehr_id` is already used by an existing EHR. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/ehr/{ehr_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Ehr> ehrCreateWithId(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId,
        @Parameter(name = "Prefer", description = "Request header to indicate the preference over response details. The response will contain the entire resource when the `Prefer` header has a value of `return=representation`. ", in = ParameterIn.HEADER) @RequestHeader(value = "Prefer", required = false, defaultValue = "return=minimal") String prefer,
        @Parameter(name = "EhrStatus", description = "An EHR_STATUS resource MAY be also supplied by the client as the request body. ") @Valid @RequestBody(required = false) EhrStatus ehrStatus
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"system_id\" : { \"value\" : \"9624982A-9F42-41A5-9318-AE13D5F5031F\" }, \"ehr_id\" : { \"value\" : \"7d44b88c-4199-4bad-97dc-d78268e01398\" }, \"ehr_status\" : { \"id\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1\" }, \"namespace\" : \"local\", \"type\" : \"EHR_STATUS\" }, \"ehr_access\" : { \"id\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"59a8d0ac-140e-4feb-b2d6-af99f8e68af8::openEHRSys.example.com::1\" }, \"namespace\" : \"local\", \"type\" : \"EHR_ACCESS\" }, \"time_created\" : { \"value\" : \"2015-01-20T19:30:22.765+01:00\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ehr/{ehr_id} : Get EHR by id
     * Retrieve the EHR with the specified &#x60;ehr_id&#x60;. 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @return &#x60;200 OK&#x60; is returned when the requested EHR resource is successfully retrieved.  (status code 200)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist.  (status code 404)
     */
    @Operation(
        operationId = "ehrGetById",
        summary = "Get EHR by id",
        description = "Retrieve the EHR with the specified `ehr_id`. ",
        tags = { "EHR" },
        responses = {
            @ApiResponse(responseCode = "200", description = "`200 OK` is returned when the requested EHR resource is successfully retrieved. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Ehr.class))
            }),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ehr/{ehr_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Ehr> ehrGetById(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"system_id\" : { \"value\" : \"9624982A-9F42-41A5-9318-AE13D5F5031F\" }, \"ehr_id\" : { \"value\" : \"7d44b88c-4199-4bad-97dc-d78268e01398\" }, \"ehr_status\" : { \"id\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1\" }, \"namespace\" : \"local\", \"type\" : \"EHR_STATUS\" }, \"ehr_access\" : { \"id\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"59a8d0ac-140e-4feb-b2d6-af99f8e68af8::openEHRSys.example.com::1\" }, \"namespace\" : \"local\", \"type\" : \"EHR_ACCESS\" }, \"time_created\" : { \"value\" : \"2015-01-20T19:30:22.765+01:00\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ehr : Get EHR by subject id
     * Retrieve the EHR with the specified &#x60;subject_id&#x60; and &#x60;subject_namespace&#x60;.  These subject parameters will be matched against EHR&#39;s EHR_STATUS.subject.external_ref.id.value and  EHR_STATUS.subject.external_ref.namespace values. 
     *
     * @param subjectId The EHR subject id.  (required)
     * @param subjectNamespace The EHR subject id namespace.  (required)
     * @return &#x60;200 OK&#x60; is returned when the requested EHR resource is successfully retrieved.  (status code 200)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with supplied subject parameters does not exist.  (status code 404)
     */
    @Operation(
        operationId = "ehrGetBySubject",
        summary = "Get EHR by subject id",
        description = "Retrieve the EHR with the specified `subject_id` and `subject_namespace`.  These subject parameters will be matched against EHR's EHR_STATUS.subject.external_ref.id.value and  EHR_STATUS.subject.external_ref.namespace values. ",
        tags = { "EHR" },
        responses = {
            @ApiResponse(responseCode = "200", description = "`200 OK` is returned when the requested EHR resource is successfully retrieved. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Ehr.class))
            }),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with supplied subject parameters does not exist. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ehr",
        produces = { "application/json" }
    )
    default ResponseEntity<Ehr> ehrGetBySubject(
        @NotNull @Parameter(name = "subject_id", description = "The EHR subject id. ", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "subject_id", required = true) String subjectId,
        @NotNull @Parameter(name = "subject_namespace", description = "The EHR subject id namespace. ", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "subject_namespace", required = true) String subjectNamespace
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"system_id\" : { \"value\" : \"9624982A-9F42-41A5-9318-AE13D5F5031F\" }, \"ehr_id\" : { \"value\" : \"7d44b88c-4199-4bad-97dc-d78268e01398\" }, \"ehr_status\" : { \"id\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1\" }, \"namespace\" : \"local\", \"type\" : \"EHR_STATUS\" }, \"ehr_access\" : { \"id\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"59a8d0ac-140e-4feb-b2d6-af99f8e68af8::openEHRSys.example.com::1\" }, \"namespace\" : \"local\", \"type\" : \"EHR_ACCESS\" }, \"time_created\" : { \"value\" : \"2015-01-20T19:30:22.765+01:00\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ehr/{ehr_id}/ehr_status : Get EHR_STATUS at time
     * Retrieves a version of the EHR_STATUS associated with the EHR identified by &#x60;ehr_id&#x60;.  If &#x60;version_at_time&#x60; is supplied, retrieves the version extant _at specified time_, otherwise retrieves the _latest_ EHR_STATUS version. 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @param versionAtTime A given time in the extended ISO 8601 format.  (optional)
     * @return &#x60;200 OK&#x60; is returned when the requested EHR_STATUS is successfully retrieved.  (status code 200)
     *         or &#x60;400 Bad Request&#x60; is returned when the request has invalid content such as an invalid &#x60;version_at_time&#x60; format.  (status code 400)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist, or when a version of the resource identified by the request parameters (at specified &#x60;version_at_time&#x60;) does not exist.  (status code 404)
     */
    @Operation(
        operationId = "ehrStatusGetAtTime",
        summary = "Get EHR_STATUS at time",
        description = "Retrieves a version of the EHR_STATUS associated with the EHR identified by `ehr_id`.  If `version_at_time` is supplied, retrieves the version extant _at specified time_, otherwise retrieves the _latest_ EHR_STATUS version. ",
        tags = { "EHR_STATUS" },
        responses = {
            @ApiResponse(responseCode = "200", description = "`200 OK` is returned when the requested EHR_STATUS is successfully retrieved. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EhrStatus.class))
            }),
            @ApiResponse(responseCode = "400", description = "`400 Bad Request` is returned when the request has invalid content such as an invalid `version_at_time` format. "),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when a version of the resource identified by the request parameters (at specified `version_at_time`) does not exist. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ehr/{ehr_id}/ehr_status",
        produces = { "application/json" }
    )
    default ResponseEntity<EhrStatus> ehrStatusGetAtTime(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId,
        @Parameter(name = "version_at_time", description = "A given time in the extended ISO 8601 format. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version_at_time", required = false) String versionAtTime
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"archetype_node_id\" : \"openEHR-EHR-EHR_STATUS.generic.v1\", \"name\" : { \"value\" : \"EHR status\" }, \"uid\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1\" }, \"subject\" : { \"_type\" : \"PARTY_SELF\" }, \"is_queryable\" : true, \"is_modifiable\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ehr/{ehr_id}/ehr_status/{version_uid} : Get EHR_STATUS by version id
     * Retrieves a particular version of the EHR_STATUS identified by &#x60;version_uid&#x60; and associated with the EHR identified by &#x60;ehr_id&#x60;. 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @param versionUid VERSION identifier taken from VERSION.uid.value.  (required)
     * @return &#x60;200 OK&#x60; is returned when the requested EHR_STATUS is successfully retrieved.  (status code 200)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist, or when the &#x60;version_uid&#x60; does not exist.  (status code 404)
     */
    @Operation(
        operationId = "ehrStatusGetByVersionId",
        summary = "Get EHR_STATUS by version id",
        description = "Retrieves a particular version of the EHR_STATUS identified by `version_uid` and associated with the EHR identified by `ehr_id`. ",
        tags = { "EHR_STATUS" },
        responses = {
            @ApiResponse(responseCode = "200", description = "`200 OK` is returned when the requested EHR_STATUS is successfully retrieved. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EhrStatus.class))
            }),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when the `version_uid` does not exist. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ehr/{ehr_id}/ehr_status/{version_uid}",
        produces = { "application/json" }
    )
    default ResponseEntity<EhrStatus> ehrStatusGetByVersionId(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId,
        @Parameter(name = "version_uid", description = "VERSION identifier taken from VERSION.uid.value. ", required = true, in = ParameterIn.PATH) @PathVariable("version_uid") String versionUid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"archetype_node_id\" : \"openEHR-EHR-EHR_STATUS.generic.v1\", \"name\" : { \"value\" : \"EHR status\" }, \"uid\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1\" }, \"subject\" : { \"_type\" : \"PARTY_SELF\" }, \"is_queryable\" : true, \"is_modifiable\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /ehr/{ehr_id}/ehr_status : Update EHR_STATUS
     * Updates EHR_STATUS associated with the EHR identified by &#x60;ehr_id&#x60;.  The existing latest &#x60;version_uid&#x60; of EHR_STATUS resource (i.e. the &#x60;preceding_version_uid&#x60;) must be specified in the &#x60;If-Match&#x60; header.  The response will contain the updated EHR_STATUS resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;. 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @param ifMatch Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#39;s value.  (required)
     * @param ehrStatus The new EHR_STATUS.  (required)
     * @param prefer Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return&#x3D;minimal)
     * @return &#x60;200 OK&#x60; is returned when the EHR_STATUS is successfully updated, and the updated resource is returned in the body when &#x60;Prefer&#x60; header value is &#x60;return&#x3D;representation&#x60;.  (status code 200)
     *         or &#x60;204 No Content&#x60; is returned when the &#x60;Prefer&#x60; header is missing or is set to &#x60;return&#x3D;minimal&#x60;.  (status code 204)
     *         or &#x60;400 Bad Request&#x60; is returned when the request URL or body (if provided) could not be parsed or has invalid content.  (status code 400)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist.  (status code 404)
     *         or &#x60;412 Precondition Failed&#x60; is returned when &#x60;If-Match&#x60; request header doesn&#39;t match the latest version on the service side. Returns also latest &#x60;version_uid&#x60; in the &#x60;Location&#x60; and &#x60;ETag&#x60; headers.  (status code 412)
     */
    @Operation(
        operationId = "ehrStatusUpdate",
        summary = "Update EHR_STATUS",
        description = "Updates EHR_STATUS associated with the EHR identified by `ehr_id`.  The existing latest `version_uid` of EHR_STATUS resource (i.e. the `preceding_version_uid`) must be specified in the `If-Match` header.  The response will contain the updated EHR_STATUS resource when the `Prefer` header has a value of `return=representation`. ",
        tags = { "EHR_STATUS" },
        responses = {
            @ApiResponse(responseCode = "200", description = "`200 OK` is returned when the EHR_STATUS is successfully updated, and the updated resource is returned in the body when `Prefer` header value is `return=representation`. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EhrStatus.class))
            }),
            @ApiResponse(responseCode = "204", description = "`204 No Content` is returned when the `Prefer` header is missing or is set to `return=minimal`. "),
            @ApiResponse(responseCode = "400", description = "`400 Bad Request` is returned when the request URL or body (if provided) could not be parsed or has invalid content. "),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist. "),
            @ApiResponse(responseCode = "412", description = "`412 Precondition Failed` is returned when `If-Match` request header doesn't match the latest version on the service side. Returns also latest `version_uid` in the `Location` and `ETag` headers. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/ehr/{ehr_id}/ehr_status",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<EhrStatus> ehrStatusUpdate(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId,
        @NotNull @Parameter(name = "If-Match", description = "Header to make the request conditional.  Together with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\"). The format is always an `version_uid` identifier enclosed by double quotes. The operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value. ", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "If-Match", required = true) String ifMatch,
        @Parameter(name = "EhrStatus", description = "The new EHR_STATUS. ", required = true) @Valid @RequestBody EhrStatus ehrStatus,
        @Parameter(name = "Prefer", description = "Request header to indicate the preference over response details. The response will contain the entire resource when the `Prefer` header has a value of `return=representation`. ", in = ParameterIn.HEADER) @RequestHeader(value = "Prefer", required = false, defaultValue = "return=minimal") String prefer
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"archetype_node_id\" : \"openEHR-EHR-EHR_STATUS.generic.v1\", \"name\" : { \"value\" : \"EHR status\" }, \"uid\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1\" }, \"subject\" : { \"_type\" : \"PARTY_SELF\" }, \"is_queryable\" : true, \"is_modifiable\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ehr/{ehr_id}/versioned_composition/{versioned_object_uid} : Get versioned COMPOSITION
     * Retrieves a VERSIONED_COMPOSITION identified by &#x60;versioned_object_uid&#x60; and associated with the EHR identified by &#x60;ehr_id&#x60;. 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @param versionedObjectUid VERSIONED_COMPOSITION identifier taken from VERSIONED_COMPOSITION.uid.value.  (required)
     * @return &#x60;200 OK&#x60; is returned when the requested VERSIONED_COMPOSITION is successfully retrieved.  (status code 200)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist, or when the &#x60;versioned_object_uid&#x60; does not exist.  (status code 404)
     */
    @Operation(
        operationId = "versionedCompositionGet",
        summary = "Get versioned COMPOSITION",
        description = "Retrieves a VERSIONED_COMPOSITION identified by `versioned_object_uid` and associated with the EHR identified by `ehr_id`. ",
        tags = { "COMPOSITION" },
        responses = {
            @ApiResponse(responseCode = "200", description = "`200 OK` is returned when the requested VERSIONED_COMPOSITION is successfully retrieved. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VersionedComposition.class))
            }),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when the `versioned_object_uid` does not exist. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ehr/{ehr_id}/versioned_composition/{versioned_object_uid}",
        produces = { "application/json" }
    )
    default ResponseEntity<VersionedComposition> versionedCompositionGet(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId,
        @Parameter(name = "versioned_object_uid", description = "VERSIONED_COMPOSITION identifier taken from VERSIONED_COMPOSITION.uid.value. ", required = true, in = ParameterIn.PATH) @PathVariable("versioned_object_uid") String versionedObjectUid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"uid\" : { \"value\" : \"8849182c-82ad-4088-a07f-48ead4180515\" }, \"owner_id\" : { \"id\" : { \"_type\" : \"HIER_OBJECT_ID\", \"value\" : \"7d44b88c-4199-4bad-97dc-d78268e01398\" }, \"namespace\" : \"local\", \"type\" : \"EHR\" }, \"time_created\" : { \"value\" : \"2015-01-20T19:30:22.765+01:00\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ehr/{ehr_id}/versioned_composition/{versioned_object_uid}/revision_history : Get versioned COMPOSITION revision history
     * Retrieves revision history of the VERSIONED_COMPOSITION identified by &#x60;versioned_object_uid&#x60; and associated with the EHR identified by &#x60;ehr_id&#x60;. 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @param versionedObjectUid VERSIONED_COMPOSITION identifier taken from VERSIONED_COMPOSITION.uid.value.  (required)
     * @return &#x60;200 OK&#x60; is returned when the requested REVISION_HISTORY is successfully retrieved.  (status code 200)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist, or when the &#x60;versioned_object_uid&#x60; does not exist.  (status code 404)
     */
    @Operation(
        operationId = "versionedCompositionRevisionHistory",
        summary = "Get versioned COMPOSITION revision history",
        description = "Retrieves revision history of the VERSIONED_COMPOSITION identified by `versioned_object_uid` and associated with the EHR identified by `ehr_id`. ",
        tags = { "COMPOSITION" },
        responses = {
            @ApiResponse(responseCode = "200", description = "`200 OK` is returned when the requested REVISION_HISTORY is successfully retrieved. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RevisionHistory.class))
            }),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when the `versioned_object_uid` does not exist. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ehr/{ehr_id}/versioned_composition/{versioned_object_uid}/revision_history",
        produces = { "application/json" }
    )
    default ResponseEntity<RevisionHistory> versionedCompositionRevisionHistory(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId,
        @Parameter(name = "versioned_object_uid", description = "VERSIONED_COMPOSITION identifier taken from VERSIONED_COMPOSITION.uid.value. ", required = true, in = ParameterIn.PATH) @PathVariable("versioned_object_uid") String versionedObjectUid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"items\" : [ { \"version_id\" : { \"value\" : \"8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1\" }, \"audits\" : [ { \"system_id\" : \"d60e2348-b083-48ce-93b9-916cef1d3a5a\", \"time_committed\" : { \"value\" : \"2015-01-20T19:30:22.765+01:00\" }, \"change_type\" : { \"value\" : \"creation\", \"defining_code\" : { \"terminology_id\" : { \"value\" : \"openehr\" }, \"code_string\" : \"249\" } }, \"description\" : { \"value\" : \"An optional description string\" }, \"committer\" : { \"_type\" : \"PARTY_IDENTIFIED\", \"name\" : \"A user name\" } } ] }, { \"version_id\" : { \"value\" : \"8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1\" }, \"audits\" : [ { \"system_id\" : \"d60e2348-b083-48ce-93b9-916cef1d3a5a\", \"time_committed\" : { \"value\" : \"2015-01-20T19:30:22.765+01:00\" }, \"change_type\" : { \"value\" : \"creation\", \"defining_code\" : { \"terminology_id\" : { \"value\" : \"openehr\" }, \"code_string\" : \"249\" } }, \"description\" : { \"value\" : \"An optional description string\" }, \"committer\" : { \"_type\" : \"PARTY_IDENTIFIED\", \"name\" : \"A user name\" } } ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ehr/{ehr_id}/versioned_composition/{versioned_object_uid}/version : Get versioned COMPOSITION version at time
     * Retrieves a VERSION from the VERSIONED_COMPOSITION identified by &#x60;versioned_object_uid&#x60; and associated with the EHR identified by &#x60;ehr_id&#x60;.  If &#x60;version_at_time&#x60; is supplied, retrieves the VERSION extant _at specified time_, otherwise retrieves the _latest_ VERSION. 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @param versionedObjectUid VERSIONED_COMPOSITION identifier taken from VERSIONED_COMPOSITION.uid.value.  (required)
     * @param versionAtTime A given time in the extended ISO 8601 format.  (optional)
     * @return &#x60;200 OK&#x60; is returned when the requested VERSION is successfully retrieved.  (status code 200)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist, or when &#x60;versioned_object_uid&#x60; does not exist, or when a version of the resource does not exist at the specified &#x60;version_at_time&#x60;.  (status code 404)
     */
    @Operation(
        operationId = "versionedCompositionVersionGetAtTime",
        summary = "Get versioned COMPOSITION version at time",
        description = "Retrieves a VERSION from the VERSIONED_COMPOSITION identified by `versioned_object_uid` and associated with the EHR identified by `ehr_id`.  If `version_at_time` is supplied, retrieves the VERSION extant _at specified time_, otherwise retrieves the _latest_ VERSION. ",
        tags = { "COMPOSITION" },
        responses = {
            @ApiResponse(responseCode = "200", description = "`200 OK` is returned when the requested VERSION is successfully retrieved. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Version.class))
            }),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when `versioned_object_uid` does not exist, or when a version of the resource does not exist at the specified `version_at_time`. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ehr/{ehr_id}/versioned_composition/{versioned_object_uid}/version",
        produces = { "application/json" }
    )
    default ResponseEntity<Version> versionedCompositionVersionGetAtTime(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId,
        @Parameter(name = "versioned_object_uid", description = "VERSIONED_COMPOSITION identifier taken from VERSIONED_COMPOSITION.uid.value. ", required = true, in = ParameterIn.PATH) @PathVariable("versioned_object_uid") String versionedObjectUid,
        @Parameter(name = "version_at_time", description = "A given time in the extended ISO 8601 format. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version_at_time", required = false) String versionAtTime
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"contribution\" : { \"id\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"fb458d9c-1323-42bc-b7f8-787f3660a0b5::openEHRSys.example.com::1\" }, \"namespace\" : \"local\", \"type\" : \"COMPOSITION\" }, \"signature\" : \"signature\", \"_type\" : \"_type\", \"commit_audit\" : { \"system_id\" : \"9624982A-9F42-41A5-9318-AE13D5F5031F\", \"committer\" : { \"_type\" : \"PARTY_IDENTIFIED\", \"name\" : \"A user name\" }, \"time_committed\" : { \"value\" : \"2017-08-15T10:37:15.422+02:00\" }, \"change_type\" : { \"value\" : \"creation\", \"defining_code\" : { \"terminology_id\" : { \"value\" : \"openehr\" }, \"code_string\" : \"249\" } }, \"description\" : { \"value\" : \"Description text\" } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ehr/{ehr_id}/versioned_composition/{versioned_object_uid}/version/{version_uid} : Get versioned COMPOSITION version by id
     * Retrieves a VERSION identified by &#x60;version_uid&#x60; of a VERSIONED_COMPOSITION identified by &#x60;versioned_object_uid&#x60; and associated with the EHR identified by &#x60;ehr_id&#x60;. 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @param versionedObjectUid VERSIONED_COMPOSITION identifier taken from VERSIONED_COMPOSITION.uid.value.  (required)
     * @param versionUid VERSION identifier taken from VERSION.uid.value.  (required)
     * @return &#x60;200 OK&#x60; is returned when the requested VERSION is successfully retrieved.  (status code 200)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist, or when &#x60;versioned_object_uid&#x60; does not exist, or when a VERSION with &#x60;version_uid&#x60; does not exist.  (status code 404)
     */
    @Operation(
        operationId = "versionedCompositionVersionGetById",
        summary = "Get versioned COMPOSITION version by id",
        description = "Retrieves a VERSION identified by `version_uid` of a VERSIONED_COMPOSITION identified by `versioned_object_uid` and associated with the EHR identified by `ehr_id`. ",
        tags = { "COMPOSITION" },
        responses = {
            @ApiResponse(responseCode = "200", description = "`200 OK` is returned when the requested VERSION is successfully retrieved. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Version.class))
            }),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when `versioned_object_uid` does not exist, or when a VERSION with `version_uid` does not exist. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ehr/{ehr_id}/versioned_composition/{versioned_object_uid}/version/{version_uid}",
        produces = { "application/json" }
    )
    default ResponseEntity<Version> versionedCompositionVersionGetById(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId,
        @Parameter(name = "versioned_object_uid", description = "VERSIONED_COMPOSITION identifier taken from VERSIONED_COMPOSITION.uid.value. ", required = true, in = ParameterIn.PATH) @PathVariable("versioned_object_uid") String versionedObjectUid,
        @Parameter(name = "version_uid", description = "VERSION identifier taken from VERSION.uid.value. ", required = true, in = ParameterIn.PATH) @PathVariable("version_uid") String versionUid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"contribution\" : { \"id\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"fb458d9c-1323-42bc-b7f8-787f3660a0b5::openEHRSys.example.com::1\" }, \"namespace\" : \"local\", \"type\" : \"COMPOSITION\" }, \"signature\" : \"signature\", \"_type\" : \"_type\", \"commit_audit\" : { \"system_id\" : \"9624982A-9F42-41A5-9318-AE13D5F5031F\", \"committer\" : { \"_type\" : \"PARTY_IDENTIFIED\", \"name\" : \"A user name\" }, \"time_committed\" : { \"value\" : \"2017-08-15T10:37:15.422+02:00\" }, \"change_type\" : { \"value\" : \"creation\", \"defining_code\" : { \"terminology_id\" : { \"value\" : \"openehr\" }, \"code_string\" : \"249\" } }, \"description\" : { \"value\" : \"Description text\" } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ehr/{ehr_id}/versioned_ehr_status : Get versioned EHR_STATUS
     * Retrieves a VERSIONED_EHR_STATUS associated with an EHR identified by &#x60;ehr_id&#x60;. 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @return &#x60;200 OK&#x60; is returned when the requested VERSIONED_EHR_STATUS is successfully retrieved.  (status code 200)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist.  (status code 404)
     */
    @Operation(
        operationId = "versionedEhrStatusGet",
        summary = "Get versioned EHR_STATUS",
        description = "Retrieves a VERSIONED_EHR_STATUS associated with an EHR identified by `ehr_id`. ",
        tags = { "EHR_STATUS" },
        responses = {
            @ApiResponse(responseCode = "200", description = "`200 OK` is returned when the requested VERSIONED_EHR_STATUS is successfully retrieved. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VersionedEhrStatus.class))
            }),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ehr/{ehr_id}/versioned_ehr_status",
        produces = { "application/json" }
    )
    default ResponseEntity<VersionedEhrStatus> versionedEhrStatusGet(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"uid\" : { \"value\" : \"6cb19121-4307-4648-9da0-d62e4d51f19b\" }, \"owner_id\" : { \"id\" : { \"_type\" : \"HIER_OBJECT_ID\", \"value\" : \"7d44b88c-4199-4bad-97dc-d78268e01398\" }, \"namespace\" : \"local\", \"type\" : \"EHR\" }, \"time_created\" : { \"value\" : \"2015-01-20T19:30:22.765+01:00\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ehr/{ehr_id}/versioned_ehr_status/revision_history : Get versioned EHR_STATUS revision history
     * Retrieves revision history of the VERSIONED_EHR_STATUS associated with the EHR identified by &#x60;ehr_id&#x60;. 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @return &#x60;200 OK&#x60; is returned when the requested REVISION_HISTORY is successfully retrieved.  (status code 200)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist.  (status code 404)
     */
    @Operation(
        operationId = "versionedEhrStatusRevisionHistory",
        summary = "Get versioned EHR_STATUS revision history",
        description = "Retrieves revision history of the VERSIONED_EHR_STATUS associated with the EHR identified by `ehr_id`. ",
        tags = { "EHR_STATUS" },
        responses = {
            @ApiResponse(responseCode = "200", description = "`200 OK` is returned when the requested REVISION_HISTORY is successfully retrieved. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RevisionHistory.class))
            }),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ehr/{ehr_id}/versioned_ehr_status/revision_history",
        produces = { "application/json" }
    )
    default ResponseEntity<RevisionHistory> versionedEhrStatusRevisionHistory(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"items\" : [ { \"version_id\" : { \"value\" : \"8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1\" }, \"audits\" : [ { \"system_id\" : \"d60e2348-b083-48ce-93b9-916cef1d3a5a\", \"time_committed\" : { \"value\" : \"2015-01-20T19:30:22.765+01:00\" }, \"change_type\" : { \"value\" : \"creation\", \"defining_code\" : { \"terminology_id\" : { \"value\" : \"openehr\" }, \"code_string\" : \"249\" } }, \"description\" : { \"value\" : \"An optional description string\" }, \"committer\" : { \"_type\" : \"PARTY_IDENTIFIED\", \"name\" : \"A user name\" } } ] }, { \"version_id\" : { \"value\" : \"8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1\" }, \"audits\" : [ { \"system_id\" : \"d60e2348-b083-48ce-93b9-916cef1d3a5a\", \"time_committed\" : { \"value\" : \"2015-01-20T19:30:22.765+01:00\" }, \"change_type\" : { \"value\" : \"creation\", \"defining_code\" : { \"terminology_id\" : { \"value\" : \"openehr\" }, \"code_string\" : \"249\" } }, \"description\" : { \"value\" : \"An optional description string\" }, \"committer\" : { \"_type\" : \"PARTY_IDENTIFIED\", \"name\" : \"A user name\" } } ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ehr/{ehr_id}/versioned_ehr_status/version : Get versioned EHR_STATUS version at time
     * Retrieves a VERSION from the VERSIONED_EHR_STATUS associated with the EHR identified by &#x60;ehr_id&#x60;.  If &#x60;version_at_time&#x60; is supplied, retrieves the VERSION extant _at specified time_, otherwise retrieves the _latest_ VERSION. 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @param versionAtTime A given time in the extended ISO 8601 format.  (optional)
     * @return &#x60;200 OK&#x60; is returned when the requested VERSION is successfully retrieved.  (status code 200)
     *         or &#x60;400 Bad Request&#x60; is returned when the request has invalid content such as an invalid &#x60;version_at_time&#x60; format.  (status code 400)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist, or when a version of the resource identified by the request parameters (at specified &#x60;version_at_time&#x60;) does not exist.  (status code 404)
     */
    @Operation(
        operationId = "versionedEhrStatusVersionGetAtTime",
        summary = "Get versioned EHR_STATUS version at time",
        description = "Retrieves a VERSION from the VERSIONED_EHR_STATUS associated with the EHR identified by `ehr_id`.  If `version_at_time` is supplied, retrieves the VERSION extant _at specified time_, otherwise retrieves the _latest_ VERSION. ",
        tags = { "EHR_STATUS" },
        responses = {
            @ApiResponse(responseCode = "200", description = "`200 OK` is returned when the requested VERSION is successfully retrieved. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Version.class))
            }),
            @ApiResponse(responseCode = "400", description = "`400 Bad Request` is returned when the request has invalid content such as an invalid `version_at_time` format. "),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when a version of the resource identified by the request parameters (at specified `version_at_time`) does not exist. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ehr/{ehr_id}/versioned_ehr_status/version",
        produces = { "application/json" }
    )
    default ResponseEntity<Version> versionedEhrStatusVersionGetAtTime(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId,
        @Parameter(name = "version_at_time", description = "A given time in the extended ISO 8601 format. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version_at_time", required = false) String versionAtTime
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"contribution\" : { \"id\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"fb458d9c-1323-42bc-b7f8-787f3660a0b5::openEHRSys.example.com::1\" }, \"namespace\" : \"local\", \"type\" : \"COMPOSITION\" }, \"signature\" : \"signature\", \"_type\" : \"_type\", \"commit_audit\" : { \"system_id\" : \"9624982A-9F42-41A5-9318-AE13D5F5031F\", \"committer\" : { \"_type\" : \"PARTY_IDENTIFIED\", \"name\" : \"A user name\" }, \"time_committed\" : { \"value\" : \"2017-08-15T10:37:15.422+02:00\" }, \"change_type\" : { \"value\" : \"creation\", \"defining_code\" : { \"terminology_id\" : { \"value\" : \"openehr\" }, \"code_string\" : \"249\" } }, \"description\" : { \"value\" : \"Description text\" } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ehr/{ehr_id}/versioned_ehr_status/version/{version_uid} : Get versioned EHR_STATUS version by id
     * Retrieves a VERSION identified by &#x60;version_uid&#x60; of an EHR_STATUS associated with the EHR identified by &#x60;ehr_id&#x60;. 
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value.  (required)
     * @param versionUid VERSION identifier taken from VERSION.uid.value.  (required)
     * @return &#x60;200 OK&#x60; is returned when the requested VERSION is successfully retrieved.  (status code 200)
     *         or &#x60;404 Not Found&#x60; is returned when an EHR with &#x60;ehr_id&#x60; does not exist, or when the &#x60;version_uid&#x60; does not exist.  (status code 404)
     */
    @Operation(
        operationId = "versionedEhrStatusVersionGetById",
        summary = "Get versioned EHR_STATUS version by id",
        description = "Retrieves a VERSION identified by `version_uid` of an EHR_STATUS associated with the EHR identified by `ehr_id`. ",
        tags = { "EHR_STATUS" },
        responses = {
            @ApiResponse(responseCode = "200", description = "`200 OK` is returned when the requested VERSION is successfully retrieved. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Version.class))
            }),
            @ApiResponse(responseCode = "404", description = "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when the `version_uid` does not exist. ")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ehr/{ehr_id}/versioned_ehr_status/version/{version_uid}",
        produces = { "application/json" }
    )
    default ResponseEntity<Version> versionedEhrStatusVersionGetById(
        @Parameter(name = "ehr_id", description = "EHR identifier taken from EHR.ehr_id.value. ", required = true, in = ParameterIn.PATH) @PathVariable("ehr_id") String ehrId,
        @Parameter(name = "version_uid", description = "VERSION identifier taken from VERSION.uid.value. ", required = true, in = ParameterIn.PATH) @PathVariable("version_uid") String versionUid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"contribution\" : { \"id\" : { \"_type\" : \"OBJECT_VERSION_ID\", \"value\" : \"fb458d9c-1323-42bc-b7f8-787f3660a0b5::openEHRSys.example.com::1\" }, \"namespace\" : \"local\", \"type\" : \"COMPOSITION\" }, \"signature\" : \"signature\", \"_type\" : \"_type\", \"commit_audit\" : { \"system_id\" : \"9624982A-9F42-41A5-9318-AE13D5F5031F\", \"committer\" : { \"_type\" : \"PARTY_IDENTIFIED\", \"name\" : \"A user name\" }, \"time_committed\" : { \"value\" : \"2017-08-15T10:37:15.422+02:00\" }, \"change_type\" : { \"value\" : \"creation\", \"defining_code\" : { \"terminology_id\" : { \"value\" : \"openehr\" }, \"code_string\" : \"249\" } }, \"description\" : { \"value\" : \"Description text\" } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
