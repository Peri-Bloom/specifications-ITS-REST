package org.openapitools.model;

import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import org.openapitools.model.DataValue;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * DvInterval
 */

@JsonIgnoreProperties(
  value = "_type", // ignore manually set _type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the _type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "_type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = DvIntervalOfDateTime.class, name = "DV_INTERVAL_of_DATE_TIME")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class DvInterval extends DataValue {

  private String type = "DV_INTERVAL";

  private Boolean lowerUnbounded;

  private Boolean upperUnbounded;

  private Boolean lowerIncluded;

  private Boolean upperIncluded;

  public DvInterval() {
    super();
  }

  /**
   * Constructor with only required parameters
   */
  public DvInterval(Boolean lowerUnbounded, Boolean upperUnbounded, Boolean lowerIncluded, Boolean upperIncluded) {
    super();
    this.lowerUnbounded = lowerUnbounded;
    this.upperUnbounded = upperUnbounded;
    this.lowerIncluded = lowerIncluded;
    this.upperIncluded = upperIncluded;
  }

  public DvInterval type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
  */
  
  @Schema(name = "_type", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("_type")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public DvInterval lowerUnbounded(Boolean lowerUnbounded) {
    this.lowerUnbounded = lowerUnbounded;
    return this;
  }

  /**
   * Get lowerUnbounded
   * @return lowerUnbounded
  */
  @NotNull 
  @Schema(name = "lower_unbounded", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("lower_unbounded")
  public Boolean getLowerUnbounded() {
    return lowerUnbounded;
  }

  public void setLowerUnbounded(Boolean lowerUnbounded) {
    this.lowerUnbounded = lowerUnbounded;
  }

  public DvInterval upperUnbounded(Boolean upperUnbounded) {
    this.upperUnbounded = upperUnbounded;
    return this;
  }

  /**
   * Get upperUnbounded
   * @return upperUnbounded
  */
  @NotNull 
  @Schema(name = "upper_unbounded", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("upper_unbounded")
  public Boolean getUpperUnbounded() {
    return upperUnbounded;
  }

  public void setUpperUnbounded(Boolean upperUnbounded) {
    this.upperUnbounded = upperUnbounded;
  }

  public DvInterval lowerIncluded(Boolean lowerIncluded) {
    this.lowerIncluded = lowerIncluded;
    return this;
  }

  /**
   * Get lowerIncluded
   * @return lowerIncluded
  */
  @NotNull 
  @Schema(name = "lower_included", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("lower_included")
  public Boolean getLowerIncluded() {
    return lowerIncluded;
  }

  public void setLowerIncluded(Boolean lowerIncluded) {
    this.lowerIncluded = lowerIncluded;
  }

  public DvInterval upperIncluded(Boolean upperIncluded) {
    this.upperIncluded = upperIncluded;
    return this;
  }

  /**
   * Get upperIncluded
   * @return upperIncluded
  */
  @NotNull 
  @Schema(name = "upper_included", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("upper_included")
  public Boolean getUpperIncluded() {
    return upperIncluded;
  }

  public void setUpperIncluded(Boolean upperIncluded) {
    this.upperIncluded = upperIncluded;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DvInterval dvInterval = (DvInterval) o;
    return Objects.equals(this.type, dvInterval.type) &&
        Objects.equals(this.lowerUnbounded, dvInterval.lowerUnbounded) &&
        Objects.equals(this.upperUnbounded, dvInterval.upperUnbounded) &&
        Objects.equals(this.lowerIncluded, dvInterval.lowerIncluded) &&
        Objects.equals(this.upperIncluded, dvInterval.upperIncluded) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, lowerUnbounded, upperUnbounded, lowerIncluded, upperIncluded, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DvInterval {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    lowerUnbounded: ").append(toIndentedString(lowerUnbounded)).append("\n");
    sb.append("    upperUnbounded: ").append(toIndentedString(upperUnbounded)).append("\n");
    sb.append("    lowerIncluded: ").append(toIndentedString(lowerIncluded)).append("\n");
    sb.append("    upperIncluded: ").append(toIndentedString(upperIncluded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

