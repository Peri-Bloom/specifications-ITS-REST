package org.openapitools.model;

import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import org.openapitools.model.AbstractEntry;
import org.openapitools.model.ItemStructure;
import org.openapitools.model.ObjectRef;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * CareEntry
 */

@JsonIgnoreProperties(
  value = "_type", // ignore manually set _type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the _type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "_type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = Action.class, name = "ACTION"),
  @JsonSubTypes.Type(value = Evaluation.class, name = "EVALUATION"),
  @JsonSubTypes.Type(value = Instruction.class, name = "INSTRUCTION"),
  @JsonSubTypes.Type(value = Observation.class, name = "OBSERVATION")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class CareEntry extends AbstractEntry {

  private ItemStructure protocol;

  private ObjectRef guidelineId;

  public CareEntry protocol(ItemStructure protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
  */
  @Valid 
  @Schema(name = "protocol", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("protocol")
  public ItemStructure getProtocol() {
    return protocol;
  }

  public void setProtocol(ItemStructure protocol) {
    this.protocol = protocol;
  }

  public CareEntry guidelineId(ObjectRef guidelineId) {
    this.guidelineId = guidelineId;
    return this;
  }

  /**
   * Get guidelineId
   * @return guidelineId
  */
  @Valid 
  @Schema(name = "guideline_id", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("guideline_id")
  public ObjectRef getGuidelineId() {
    return guidelineId;
  }

  public void setGuidelineId(ObjectRef guidelineId) {
    this.guidelineId = guidelineId;
  }


  public CareEntry language(CodePhrase language) {
    super.language(language);
    return this;
  }

  public CareEntry encoding(CodePhrase encoding) {
    super.encoding(encoding);
    return this;
  }

  public CareEntry otherParticipations(List<@Valid Participation> otherParticipations) {
    super.otherParticipations(otherParticipations);
    return this;
  }

  public CareEntry addOtherParticipationsItem(Participation otherParticipationsItem) {
    super.addOtherParticipationsItem(otherParticipationsItem);
    return this;
  }

  public CareEntry workflowId(ObjectRef workflowId) {
    super.workflowId(workflowId);
    return this;
  }

  public CareEntry subject(PartyProxy subject) {
    super.subject(subject);
    return this;
  }

  public CareEntry provider(PartyProxy provider) {
    super.provider(provider);
    return this;
  }

  public CareEntry name(DvText name) {
    super.name(name);
    return this;
  }

  public CareEntry archetypeNodeId(String archetypeNodeId) {
    super.archetypeNodeId(archetypeNodeId);
    return this;
  }

  public CareEntry uid(UidBasedId uid) {
    super.uid(uid);
    return this;
  }

  public CareEntry links(List<@Valid Link> links) {
    super.links(links);
    return this;
  }

  public CareEntry addLinksItem(Link linksItem) {
    super.addLinksItem(linksItem);
    return this;
  }

  public CareEntry archetypeDetails(Archetyped archetypeDetails) {
    super.archetypeDetails(archetypeDetails);
    return this;
  }

  public CareEntry feederAudit(FeederAudit feederAudit) {
    super.feederAudit(feederAudit);
    return this;
  }

  public CareEntry type(String type) {
    super.type(type);
    return this;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CareEntry careEntry = (CareEntry) o;
    return Objects.equals(this.protocol, careEntry.protocol) &&
        Objects.equals(this.guidelineId, careEntry.guidelineId) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(protocol, guidelineId, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CareEntry {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    guidelineId: ").append(toIndentedString(guidelineId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

