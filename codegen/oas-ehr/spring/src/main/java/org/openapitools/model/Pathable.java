package org.openapitools.model;

import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * Pathable
 */

@JsonIgnoreProperties(
  value = "_type", // ignore manually set _type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the _type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "_type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = Action.class, name = "ACTION"),
  @JsonSubTypes.Type(value = Activity.class, name = "ACTIVITY"),
  @JsonSubTypes.Type(value = AdminEntry.class, name = "ADMIN_ENTRY"),
  @JsonSubTypes.Type(value = CareEntry.class, name = "CARE_ENTRY"),
  @JsonSubTypes.Type(value = Clstr.class, name = "CLUSTER"),
  @JsonSubTypes.Type(value = Composition.class, name = "COMPOSITION"),
  @JsonSubTypes.Type(value = ContentItem.class, name = "CONTENT_ITEM"),
  @JsonSubTypes.Type(value = DataStructure.class, name = "DATA_STRUCTURE"),
  @JsonSubTypes.Type(value = EhrStatus.class, name = "EHR_STATUS"),
  @JsonSubTypes.Type(value = Element.class, name = "ELEMENT"),
  @JsonSubTypes.Type(value = AbstractEntry.class, name = "ENTRY"),
  @JsonSubTypes.Type(value = Evaluation.class, name = "EVALUATION"),
  @JsonSubTypes.Type(value = Event.class, name = "EVENT"),
  @JsonSubTypes.Type(value = EventContext.class, name = "EVENT_CONTEXT"),
  @JsonSubTypes.Type(value = Folder.class, name = "FOLDER"),
  @JsonSubTypes.Type(value = History.class, name = "HISTORY"),
  @JsonSubTypes.Type(value = Instruction.class, name = "INSTRUCTION"),
  @JsonSubTypes.Type(value = InstructionDetails.class, name = "INSTRUCTION_DETAILS"),
  @JsonSubTypes.Type(value = IsmTransition.class, name = "ISM_TRANSITION"),
  @JsonSubTypes.Type(value = Item.class, name = "ITEM"),
  @JsonSubTypes.Type(value = ItemList.class, name = "ITEM_LIST"),
  @JsonSubTypes.Type(value = ItemSingle.class, name = "ITEM_SINGLE"),
  @JsonSubTypes.Type(value = ItemStructure.class, name = "ITEM_STRUCTURE"),
  @JsonSubTypes.Type(value = ItemTable.class, name = "ITEM_TABLE"),
  @JsonSubTypes.Type(value = ItemTree.class, name = "ITEM_TREE"),
  @JsonSubTypes.Type(value = Locatable.class, name = "LOCATABLE"),
  @JsonSubTypes.Type(value = Observation.class, name = "OBSERVATION"),
  @JsonSubTypes.Type(value = Versionable.class, name = "Versionable")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class Pathable {

  private String type;

  public Pathable type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
  */
  
  @Schema(name = "_type", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("_type")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pathable pathable = (Pathable) o;
    return Objects.equals(this.type, pathable.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pathable {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

