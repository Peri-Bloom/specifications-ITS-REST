package org.openapitools.model;

import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.model.CodePhrase;
import org.openapitools.model.ContentItem;
import org.openapitools.model.ObjectRef;
import org.openapitools.model.Participation;
import org.openapitools.model.PartyProxy;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * AbstractEntry
 */

@JsonIgnoreProperties(
  value = "_type", // ignore manually set _type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the _type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "_type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = Action.class, name = "ACTION"),
  @JsonSubTypes.Type(value = AdminEntry.class, name = "ADMIN_ENTRY"),
  @JsonSubTypes.Type(value = CareEntry.class, name = "CARE_ENTRY"),
  @JsonSubTypes.Type(value = Evaluation.class, name = "EVALUATION"),
  @JsonSubTypes.Type(value = Instruction.class, name = "INSTRUCTION"),
  @JsonSubTypes.Type(value = Observation.class, name = "OBSERVATION")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class AbstractEntry extends ContentItem {

  private CodePhrase language;

  private CodePhrase encoding;

  @Valid
  private List<@Valid Participation> otherParticipations;

  private ObjectRef workflowId;

  private PartyProxy subject;

  private PartyProxy provider;

  public AbstractEntry() {
    super();
  }

  /**
   * Constructor with only required parameters
   */
  public AbstractEntry(CodePhrase language, CodePhrase encoding, PartyProxy subject) {
    super();
    this.language = language;
    this.encoding = encoding;
    this.subject = subject;
  }

  public AbstractEntry language(CodePhrase language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
  */
  @NotNull @Valid 
  @Schema(name = "language", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("language")
  public CodePhrase getLanguage() {
    return language;
  }

  public void setLanguage(CodePhrase language) {
    this.language = language;
  }

  public AbstractEntry encoding(CodePhrase encoding) {
    this.encoding = encoding;
    return this;
  }

  /**
   * Get encoding
   * @return encoding
  */
  @NotNull @Valid 
  @Schema(name = "encoding", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("encoding")
  public CodePhrase getEncoding() {
    return encoding;
  }

  public void setEncoding(CodePhrase encoding) {
    this.encoding = encoding;
  }

  public AbstractEntry otherParticipations(List<@Valid Participation> otherParticipations) {
    this.otherParticipations = otherParticipations;
    return this;
  }

  public AbstractEntry addOtherParticipationsItem(Participation otherParticipationsItem) {
    if (this.otherParticipations == null) {
      this.otherParticipations = new ArrayList<>();
    }
    this.otherParticipations.add(otherParticipationsItem);
    return this;
  }

  /**
   * Get otherParticipations
   * @return otherParticipations
  */
  @Valid 
  @Schema(name = "other_participations", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("other_participations")
  public List<@Valid Participation> getOtherParticipations() {
    return otherParticipations;
  }

  public void setOtherParticipations(List<@Valid Participation> otherParticipations) {
    this.otherParticipations = otherParticipations;
  }

  public AbstractEntry workflowId(ObjectRef workflowId) {
    this.workflowId = workflowId;
    return this;
  }

  /**
   * Get workflowId
   * @return workflowId
  */
  @Valid 
  @Schema(name = "workflow_id", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("workflow_id")
  public ObjectRef getWorkflowId() {
    return workflowId;
  }

  public void setWorkflowId(ObjectRef workflowId) {
    this.workflowId = workflowId;
  }

  public AbstractEntry subject(PartyProxy subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
  */
  @NotNull @Valid 
  @Schema(name = "subject", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("subject")
  public PartyProxy getSubject() {
    return subject;
  }

  public void setSubject(PartyProxy subject) {
    this.subject = subject;
  }

  public AbstractEntry provider(PartyProxy provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Get provider
   * @return provider
  */
  @Valid 
  @Schema(name = "provider", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("provider")
  public PartyProxy getProvider() {
    return provider;
  }

  public void setProvider(PartyProxy provider) {
    this.provider = provider;
  }


  public AbstractEntry name(DvText name) {
    super.name(name);
    return this;
  }

  public AbstractEntry archetypeNodeId(String archetypeNodeId) {
    super.archetypeNodeId(archetypeNodeId);
    return this;
  }

  public AbstractEntry uid(UidBasedId uid) {
    super.uid(uid);
    return this;
  }

  public AbstractEntry links(List<@Valid Link> links) {
    super.links(links);
    return this;
  }

  public AbstractEntry addLinksItem(Link linksItem) {
    super.addLinksItem(linksItem);
    return this;
  }

  public AbstractEntry archetypeDetails(Archetyped archetypeDetails) {
    super.archetypeDetails(archetypeDetails);
    return this;
  }

  public AbstractEntry feederAudit(FeederAudit feederAudit) {
    super.feederAudit(feederAudit);
    return this;
  }

  public AbstractEntry type(String type) {
    super.type(type);
    return this;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbstractEntry abstractEntry = (AbstractEntry) o;
    return Objects.equals(this.language, abstractEntry.language) &&
        Objects.equals(this.encoding, abstractEntry.encoding) &&
        Objects.equals(this.otherParticipations, abstractEntry.otherParticipations) &&
        Objects.equals(this.workflowId, abstractEntry.workflowId) &&
        Objects.equals(this.subject, abstractEntry.subject) &&
        Objects.equals(this.provider, abstractEntry.provider) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(language, encoding, otherParticipations, workflowId, subject, provider, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbstractEntry {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    otherParticipations: ").append(toIndentedString(otherParticipations)).append("\n");
    sb.append("    workflowId: ").append(toIndentedString(workflowId)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

