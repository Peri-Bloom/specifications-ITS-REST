package org.openapitools.model;

import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import org.openapitools.model.AuditDetails;
import org.openapitools.model.ObjectRef;
import org.openapitools.model.Versionable;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * A VERSION resource
 */

@Schema(name = "Version", description = "A VERSION resource")
@JsonIgnoreProperties(
  value = "_type", // ignore manually set _type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the _type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "_type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = ImportedVersion.class, name = "IMPORTED_VERSION"),
  @JsonSubTypes.Type(value = OriginalVersion.class, name = "ORIGINAL_VERSION")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class Version {

  private String type;

  private ObjectRef contribution;

  private String signature;

  private AuditDetails commitAudit;

  private Versionable data;

  /**
   * Default constructor
   * @deprecated Use {@link Version#Version(ObjectRef, AuditDetails, Versionable)}
   */
  @Deprecated
  public Version() {
    super();
  }

  /**
   * Constructor with only required parameters
   */
  public Version(ObjectRef contribution, AuditDetails commitAudit, Versionable data) {
    this.contribution = contribution;
    this.commitAudit = commitAudit;
    this.data = data;
  }

  public Version type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
  */
  
  @Schema(name = "_type", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("_type")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public Version contribution(ObjectRef contribution) {
    this.contribution = contribution;
    return this;
  }

  /**
   * Get contribution
   * @return contribution
  */
  @NotNull @Valid 
  @Schema(name = "contribution", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("contribution")
  public ObjectRef getContribution() {
    return contribution;
  }

  public void setContribution(ObjectRef contribution) {
    this.contribution = contribution;
  }

  public Version signature(String signature) {
    this.signature = signature;
    return this;
  }

  /**
   * Get signature
   * @return signature
  */
  
  @Schema(name = "signature", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("signature")
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }

  public Version commitAudit(AuditDetails commitAudit) {
    this.commitAudit = commitAudit;
    return this;
  }

  /**
   * Get commitAudit
   * @return commitAudit
  */
  @NotNull @Valid 
  @Schema(name = "commit_audit", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("commit_audit")
  public AuditDetails getCommitAudit() {
    return commitAudit;
  }

  public void setCommitAudit(AuditDetails commitAudit) {
    this.commitAudit = commitAudit;
  }

  public Version data(Versionable data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
  */
  @NotNull @Valid 
  @Schema(name = "data", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("data")
  public Versionable getData() {
    return data;
  }

  public void setData(Versionable data) {
    this.data = data;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Version version = (Version) o;
    return Objects.equals(this.type, version.type) &&
        Objects.equals(this.contribution, version.contribution) &&
        Objects.equals(this.signature, version.signature) &&
        Objects.equals(this.commitAudit, version.commitAudit) &&
        Objects.equals(this.data, version.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, contribution, signature, commitAudit, data);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Version {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    contribution: ").append(toIndentedString(contribution)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    commitAudit: ").append(toIndentedString(commitAudit)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

