/*
EHR API

Testing COMPOSITIONApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_COMPOSITIONApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test COMPOSITIONApiService CompositionCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ehrId string

		resp, httpRes, err := apiClient.COMPOSITIONApi.CompositionCreate(context.Background(), ehrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test COMPOSITIONApiService CompositionDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ehrId string
		var uidBasedId string

		resp, httpRes, err := apiClient.COMPOSITIONApi.CompositionDelete(context.Background(), ehrId, uidBasedId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test COMPOSITIONApiService CompositionGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ehrId string
		var uidBasedId string

		resp, httpRes, err := apiClient.COMPOSITIONApi.CompositionGet(context.Background(), ehrId, uidBasedId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test COMPOSITIONApiService CompositionUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ehrId string
		var uidBasedId string

		resp, httpRes, err := apiClient.COMPOSITIONApi.CompositionUpdate(context.Background(), ehrId, uidBasedId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test COMPOSITIONApiService VersionedCompositionGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ehrId string
		var versionedObjectUid string

		resp, httpRes, err := apiClient.COMPOSITIONApi.VersionedCompositionGet(context.Background(), ehrId, versionedObjectUid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test COMPOSITIONApiService VersionedCompositionRevisionHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ehrId string
		var versionedObjectUid string

		resp, httpRes, err := apiClient.COMPOSITIONApi.VersionedCompositionRevisionHistory(context.Background(), ehrId, versionedObjectUid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test COMPOSITIONApiService VersionedCompositionVersionGetAtTime", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ehrId string
		var versionedObjectUid string

		resp, httpRes, err := apiClient.COMPOSITIONApi.VersionedCompositionVersionGetAtTime(context.Background(), ehrId, versionedObjectUid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test COMPOSITIONApiService VersionedCompositionVersionGetById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ehrId string
		var versionedObjectUid string
		var versionUid string

		resp, httpRes, err := apiClient.COMPOSITIONApi.VersionedCompositionVersionGetById(context.Background(), ehrId, versionedObjectUid, versionUid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
