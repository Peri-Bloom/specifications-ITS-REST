/*
EHR API

Testing EHRSTATUSApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_EHRSTATUSApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EHRSTATUSApiService EhrStatusGetAtTime", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ehrId string

		resp, httpRes, err := apiClient.EHRSTATUSApi.EhrStatusGetAtTime(context.Background(), ehrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EHRSTATUSApiService EhrStatusGetByVersionId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ehrId string
		var versionUid string

		resp, httpRes, err := apiClient.EHRSTATUSApi.EhrStatusGetByVersionId(context.Background(), ehrId, versionUid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EHRSTATUSApiService EhrStatusUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ehrId string

		resp, httpRes, err := apiClient.EHRSTATUSApi.EhrStatusUpdate(context.Background(), ehrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EHRSTATUSApiService VersionedEhrStatusGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ehrId string

		resp, httpRes, err := apiClient.EHRSTATUSApi.VersionedEhrStatusGet(context.Background(), ehrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EHRSTATUSApiService VersionedEhrStatusRevisionHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ehrId string

		resp, httpRes, err := apiClient.EHRSTATUSApi.VersionedEhrStatusRevisionHistory(context.Background(), ehrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EHRSTATUSApiService VersionedEhrStatusVersionGetAtTime", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ehrId string

		resp, httpRes, err := apiClient.EHRSTATUSApi.VersionedEhrStatusVersionGetAtTime(context.Background(), ehrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EHRSTATUSApiService VersionedEhrStatusVersionGetById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ehrId string
		var versionUid string

		resp, httpRes, err := apiClient.EHRSTATUSApi.VersionedEhrStatusVersionGetById(context.Background(), ehrId, versionUid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
