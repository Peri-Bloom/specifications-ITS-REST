/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.Folder

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DIRECTORYApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://openEHRSys.example.com/v1")
        }
    }

    /**
     * enum for parameter prefer
     */
     enum class PreferDirectoryCreate(val value: kotlin.String) {
         @Json(name = "return=representation") representation("return=representation"),
         @Json(name = "return=minimal") minimal("return=minimal")
     }

    /**
     * Create directory
     * Creates a new directory FOLDER associated with the EHR identified by &#x60;ehr_id&#x60;. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param folder The directory. 
     * @param prefer Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return=minimal)
     * @return Folder
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun directoryCreate(ehrId: kotlin.String, folder: Folder, prefer: PreferDirectoryCreate? = PreferDirectoryCreate.minimal) : Folder {
        val localVarResponse = directoryCreateWithHttpInfo(ehrId = ehrId, folder = folder, prefer = prefer)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Folder
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create directory
     * Creates a new directory FOLDER associated with the EHR identified by &#x60;ehr_id&#x60;. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param folder The directory. 
     * @param prefer Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return=minimal)
     * @return ApiResponse<Folder?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun directoryCreateWithHttpInfo(ehrId: kotlin.String, folder: Folder, prefer: PreferDirectoryCreate?) : ApiResponse<Folder?> {
        val localVariableConfig = directoryCreateRequestConfig(ehrId = ehrId, folder = folder, prefer = prefer)

        return request<Folder, Folder>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation directoryCreate
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param folder The directory. 
     * @param prefer Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return=minimal)
     * @return RequestConfig
     */
    fun directoryCreateRequestConfig(ehrId: kotlin.String, folder: Folder, prefer: PreferDirectoryCreate?) : RequestConfig<Folder> {
        val localVariableBody = folder
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        prefer?.apply { localVariableHeaders["Prefer"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/ehr/{ehr_id}/directory".replace("{"+"ehr_id"+"}", encodeURIComponent(ehrId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Delete directory
     * Deletes directory FOLDER associated with the EHR identified by &#x60;ehr_id&#x60;.  The existing latest &#x60;version_uid&#x60; of directory FOLDER resource (i.e. the &#x60;preceding_version_uid&#x60;) must be specified in the &#x60;If-Match&#x60; header. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param ifMatch Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#39;s value. 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun directoryDelete(ehrId: kotlin.String, ifMatch: kotlin.String) : Unit {
        val localVarResponse = directoryDeleteWithHttpInfo(ehrId = ehrId, ifMatch = ifMatch)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete directory
     * Deletes directory FOLDER associated with the EHR identified by &#x60;ehr_id&#x60;.  The existing latest &#x60;version_uid&#x60; of directory FOLDER resource (i.e. the &#x60;preceding_version_uid&#x60;) must be specified in the &#x60;If-Match&#x60; header. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param ifMatch Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#39;s value. 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun directoryDeleteWithHttpInfo(ehrId: kotlin.String, ifMatch: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = directoryDeleteRequestConfig(ehrId = ehrId, ifMatch = ifMatch)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation directoryDelete
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param ifMatch Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#39;s value. 
     * @return RequestConfig
     */
    fun directoryDeleteRequestConfig(ehrId: kotlin.String, ifMatch: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifMatch.apply { localVariableHeaders["If-Match"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/ehr/{ehr_id}/directory".replace("{"+"ehr_id"+"}", encodeURIComponent(ehrId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get folder in directory version at time
     * Retrieves the version of the directory FOLDER associated with the EHR identified by &#x60;ehr_id&#x60;.  If &#x60;version_at_time&#x60; is supplied, retrieves the version extant _at specified time_, otherwise retrieves the _latest_ directory FOLDER version.   If &#x60;path&#x60; is supplied, retrieves from the directory only the sub-FOLDER that is associated with that path. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param versionAtTime A given time in the extended ISO 8601 format.  (optional)
     * @param path A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.  (optional)
     * @return Folder
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun directoryGetAtTime(ehrId: kotlin.String, versionAtTime: kotlin.String? = null, path: kotlin.String? = null) : Folder {
        val localVarResponse = directoryGetAtTimeWithHttpInfo(ehrId = ehrId, versionAtTime = versionAtTime, path = path)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Folder
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get folder in directory version at time
     * Retrieves the version of the directory FOLDER associated with the EHR identified by &#x60;ehr_id&#x60;.  If &#x60;version_at_time&#x60; is supplied, retrieves the version extant _at specified time_, otherwise retrieves the _latest_ directory FOLDER version.   If &#x60;path&#x60; is supplied, retrieves from the directory only the sub-FOLDER that is associated with that path. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param versionAtTime A given time in the extended ISO 8601 format.  (optional)
     * @param path A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.  (optional)
     * @return ApiResponse<Folder?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun directoryGetAtTimeWithHttpInfo(ehrId: kotlin.String, versionAtTime: kotlin.String?, path: kotlin.String?) : ApiResponse<Folder?> {
        val localVariableConfig = directoryGetAtTimeRequestConfig(ehrId = ehrId, versionAtTime = versionAtTime, path = path)

        return request<Unit, Folder>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation directoryGetAtTime
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param versionAtTime A given time in the extended ISO 8601 format.  (optional)
     * @param path A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.  (optional)
     * @return RequestConfig
     */
    fun directoryGetAtTimeRequestConfig(ehrId: kotlin.String, versionAtTime: kotlin.String?, path: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (versionAtTime != null) {
                    put("version_at_time", listOf(versionAtTime.toString()))
                }
                if (path != null) {
                    put("path", listOf(path.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/ehr/{ehr_id}/directory".replace("{"+"ehr_id"+"}", encodeURIComponent(ehrId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get folder in directory version
     * Retrieves a particular version of the directory FOLDER identified by &#x60;version_uid&#x60; and associated with the EHR identified by &#x60;ehr_id&#x60;.  If &#x60;path&#x60; is supplied, retrieves from the directory only the sub-FOLDER that is associated with that path. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param versionUid VERSION identifier taken from VERSION.uid.value. 
     * @param path A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.  (optional)
     * @return Folder
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun directoryGetByVersionId(ehrId: kotlin.String, versionUid: kotlin.String, path: kotlin.String? = null) : Folder {
        val localVarResponse = directoryGetByVersionIdWithHttpInfo(ehrId = ehrId, versionUid = versionUid, path = path)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Folder
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get folder in directory version
     * Retrieves a particular version of the directory FOLDER identified by &#x60;version_uid&#x60; and associated with the EHR identified by &#x60;ehr_id&#x60;.  If &#x60;path&#x60; is supplied, retrieves from the directory only the sub-FOLDER that is associated with that path. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param versionUid VERSION identifier taken from VERSION.uid.value. 
     * @param path A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.  (optional)
     * @return ApiResponse<Folder?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun directoryGetByVersionIdWithHttpInfo(ehrId: kotlin.String, versionUid: kotlin.String, path: kotlin.String?) : ApiResponse<Folder?> {
        val localVariableConfig = directoryGetByVersionIdRequestConfig(ehrId = ehrId, versionUid = versionUid, path = path)

        return request<Unit, Folder>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation directoryGetByVersionId
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param versionUid VERSION identifier taken from VERSION.uid.value. 
     * @param path A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.  (optional)
     * @return RequestConfig
     */
    fun directoryGetByVersionIdRequestConfig(ehrId: kotlin.String, versionUid: kotlin.String, path: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (path != null) {
                    put("path", listOf(path.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/ehr/{ehr_id}/directory/{version_uid}".replace("{"+"ehr_id"+"}", encodeURIComponent(ehrId.toString())).replace("{"+"version_uid"+"}", encodeURIComponent(versionUid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter prefer
     */
     enum class PreferDirectoryUpdate(val value: kotlin.String) {
         @Json(name = "return=representation") representation("return=representation"),
         @Json(name = "return=minimal") minimal("return=minimal")
     }

    /**
     * Update directory
     * Updates directory FOLDER associated with the EHR identified by &#x60;ehr_id&#x60;.  The existing latest &#x60;version_uid&#x60; of directory FOLDER resource (i.e. the &#x60;preceding_version_uid&#x60;) must be specified in the &#x60;If-Match&#x60; header. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param ifMatch Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#39;s value. 
     * @param folder The new directory. 
     * @param prefer Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return=minimal)
     * @return Folder
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun directoryUpdate(ehrId: kotlin.String, ifMatch: kotlin.String, folder: Folder, prefer: PreferDirectoryUpdate? = PreferDirectoryUpdate.minimal) : Folder {
        val localVarResponse = directoryUpdateWithHttpInfo(ehrId = ehrId, ifMatch = ifMatch, folder = folder, prefer = prefer)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Folder
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update directory
     * Updates directory FOLDER associated with the EHR identified by &#x60;ehr_id&#x60;.  The existing latest &#x60;version_uid&#x60; of directory FOLDER resource (i.e. the &#x60;preceding_version_uid&#x60;) must be specified in the &#x60;If-Match&#x60; header. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param ifMatch Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#39;s value. 
     * @param folder The new directory. 
     * @param prefer Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return=minimal)
     * @return ApiResponse<Folder?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun directoryUpdateWithHttpInfo(ehrId: kotlin.String, ifMatch: kotlin.String, folder: Folder, prefer: PreferDirectoryUpdate?) : ApiResponse<Folder?> {
        val localVariableConfig = directoryUpdateRequestConfig(ehrId = ehrId, ifMatch = ifMatch, folder = folder, prefer = prefer)

        return request<Folder, Folder>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation directoryUpdate
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param ifMatch Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#39;s value. 
     * @param folder The new directory. 
     * @param prefer Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return=minimal)
     * @return RequestConfig
     */
    fun directoryUpdateRequestConfig(ehrId: kotlin.String, ifMatch: kotlin.String, folder: Folder, prefer: PreferDirectoryUpdate?) : RequestConfig<Folder> {
        val localVariableBody = folder
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifMatch.apply { localVariableHeaders["If-Match"] = this.toString() }
        prefer?.apply { localVariableHeaders["Prefer"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/ehr/{ehr_id}/directory".replace("{"+"ehr_id"+"}", encodeURIComponent(ehrId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
