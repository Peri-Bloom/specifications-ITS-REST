/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.Contribution
import org.openapitools.client.models.Error
import org.openapitools.client.models.NewContribution

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class CONTRIBUTIONApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://openEHRSys.example.com/v1")
        }
    }

    /**
     * enum for parameter prefer
     */
     enum class PreferContributionCreate(val value: kotlin.String) {
         @Json(name = "return=representation") representation("return=representation"),
         @Json(name = "return=minimal") minimal("return=minimal")
     }

    /**
     * Create CONTRIBUTION
     * We will use the relaxed CONTRIBUTION with the following optional attributes:   - &#x60;uid&#x60;: when provided, it will be accepted in case is not in-use, otherwise error will be returned   - &#x60;audit.time_committed&#x60;: server will always set it   - &#x60;audit.system_id&#x60;: when provided, it will be validated 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param newContribution The CONTRIBUTION. 
     * @param prefer Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return=minimal)
     * @return Contribution
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun contributionCreate(ehrId: kotlin.String, newContribution: NewContribution, prefer: PreferContributionCreate? = PreferContributionCreate.minimal) : Contribution {
        val localVarResponse = contributionCreateWithHttpInfo(ehrId = ehrId, newContribution = newContribution, prefer = prefer)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Contribution
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create CONTRIBUTION
     * We will use the relaxed CONTRIBUTION with the following optional attributes:   - &#x60;uid&#x60;: when provided, it will be accepted in case is not in-use, otherwise error will be returned   - &#x60;audit.time_committed&#x60;: server will always set it   - &#x60;audit.system_id&#x60;: when provided, it will be validated 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param newContribution The CONTRIBUTION. 
     * @param prefer Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return=minimal)
     * @return ApiResponse<Contribution?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun contributionCreateWithHttpInfo(ehrId: kotlin.String, newContribution: NewContribution, prefer: PreferContributionCreate?) : ApiResponse<Contribution?> {
        val localVariableConfig = contributionCreateRequestConfig(ehrId = ehrId, newContribution = newContribution, prefer = prefer)

        return request<NewContribution, Contribution>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation contributionCreate
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param newContribution The CONTRIBUTION. 
     * @param prefer Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return=minimal)
     * @return RequestConfig
     */
    fun contributionCreateRequestConfig(ehrId: kotlin.String, newContribution: NewContribution, prefer: PreferContributionCreate?) : RequestConfig<NewContribution> {
        val localVariableBody = newContribution
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        prefer?.apply { localVariableHeaders["Prefer"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/ehr/{ehr_id}/contribution".replace("{"+"ehr_id"+"}", encodeURIComponent(ehrId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get CONTRIBUTION by id
     * Retrieves a CONTRIBUTION identified by &#x60;contribution_uid&#x60; and associated with the EHR identified by &#x60;ehr_id&#x60;. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param contributionUid The CONTRIBUTION uid. 
     * @return Contribution
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun contributionGet(ehrId: kotlin.String, contributionUid: kotlin.String) : Contribution {
        val localVarResponse = contributionGetWithHttpInfo(ehrId = ehrId, contributionUid = contributionUid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Contribution
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get CONTRIBUTION by id
     * Retrieves a CONTRIBUTION identified by &#x60;contribution_uid&#x60; and associated with the EHR identified by &#x60;ehr_id&#x60;. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param contributionUid The CONTRIBUTION uid. 
     * @return ApiResponse<Contribution?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun contributionGetWithHttpInfo(ehrId: kotlin.String, contributionUid: kotlin.String) : ApiResponse<Contribution?> {
        val localVariableConfig = contributionGetRequestConfig(ehrId = ehrId, contributionUid = contributionUid)

        return request<Unit, Contribution>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation contributionGet
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param contributionUid The CONTRIBUTION uid. 
     * @return RequestConfig
     */
    fun contributionGetRequestConfig(ehrId: kotlin.String, contributionUid: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/ehr/{ehr_id}/contribution/{contribution_uid}".replace("{"+"ehr_id"+"}", encodeURIComponent(ehrId.toString())).replace("{"+"contribution_uid"+"}", encodeURIComponent(contributionUid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
