/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.EhrStatus
import org.openapitools.client.models.RevisionHistory
import org.openapitools.client.models.Version
import org.openapitools.client.models.VersionedEhrStatus

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class EHRSTATUSApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://openEHRSys.example.com/v1")
        }
    }

    /**
     * Get EHR_STATUS at time
     * Retrieves a version of the EHR_STATUS associated with the EHR identified by &#x60;ehr_id&#x60;.  If &#x60;version_at_time&#x60; is supplied, retrieves the version extant _at specified time_, otherwise retrieves the _latest_ EHR_STATUS version. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param versionAtTime A given time in the extended ISO 8601 format.  (optional)
     * @return EhrStatus
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ehrStatusGetAtTime(ehrId: kotlin.String, versionAtTime: kotlin.String? = null) : EhrStatus {
        val localVarResponse = ehrStatusGetAtTimeWithHttpInfo(ehrId = ehrId, versionAtTime = versionAtTime)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EhrStatus
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get EHR_STATUS at time
     * Retrieves a version of the EHR_STATUS associated with the EHR identified by &#x60;ehr_id&#x60;.  If &#x60;version_at_time&#x60; is supplied, retrieves the version extant _at specified time_, otherwise retrieves the _latest_ EHR_STATUS version. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param versionAtTime A given time in the extended ISO 8601 format.  (optional)
     * @return ApiResponse<EhrStatus?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ehrStatusGetAtTimeWithHttpInfo(ehrId: kotlin.String, versionAtTime: kotlin.String?) : ApiResponse<EhrStatus?> {
        val localVariableConfig = ehrStatusGetAtTimeRequestConfig(ehrId = ehrId, versionAtTime = versionAtTime)

        return request<Unit, EhrStatus>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ehrStatusGetAtTime
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param versionAtTime A given time in the extended ISO 8601 format.  (optional)
     * @return RequestConfig
     */
    fun ehrStatusGetAtTimeRequestConfig(ehrId: kotlin.String, versionAtTime: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (versionAtTime != null) {
                    put("version_at_time", listOf(versionAtTime.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/ehr/{ehr_id}/ehr_status".replace("{"+"ehr_id"+"}", encodeURIComponent(ehrId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get EHR_STATUS by version id
     * Retrieves a particular version of the EHR_STATUS identified by &#x60;version_uid&#x60; and associated with the EHR identified by &#x60;ehr_id&#x60;. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param versionUid VERSION identifier taken from VERSION.uid.value. 
     * @return EhrStatus
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ehrStatusGetByVersionId(ehrId: kotlin.String, versionUid: kotlin.String) : EhrStatus {
        val localVarResponse = ehrStatusGetByVersionIdWithHttpInfo(ehrId = ehrId, versionUid = versionUid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EhrStatus
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get EHR_STATUS by version id
     * Retrieves a particular version of the EHR_STATUS identified by &#x60;version_uid&#x60; and associated with the EHR identified by &#x60;ehr_id&#x60;. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param versionUid VERSION identifier taken from VERSION.uid.value. 
     * @return ApiResponse<EhrStatus?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ehrStatusGetByVersionIdWithHttpInfo(ehrId: kotlin.String, versionUid: kotlin.String) : ApiResponse<EhrStatus?> {
        val localVariableConfig = ehrStatusGetByVersionIdRequestConfig(ehrId = ehrId, versionUid = versionUid)

        return request<Unit, EhrStatus>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ehrStatusGetByVersionId
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param versionUid VERSION identifier taken from VERSION.uid.value. 
     * @return RequestConfig
     */
    fun ehrStatusGetByVersionIdRequestConfig(ehrId: kotlin.String, versionUid: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/ehr/{ehr_id}/ehr_status/{version_uid}".replace("{"+"ehr_id"+"}", encodeURIComponent(ehrId.toString())).replace("{"+"version_uid"+"}", encodeURIComponent(versionUid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter prefer
     */
     enum class Prefer_ehrStatusUpdate(val value: kotlin.String) {
         @Json(name = "return=representation") representation("return=representation"),
         @Json(name = "return=minimal") minimal("return=minimal")
     }

    /**
     * Update EHR_STATUS
     * Updates EHR_STATUS associated with the EHR identified by &#x60;ehr_id&#x60;.  The existing latest &#x60;version_uid&#x60; of EHR_STATUS resource (i.e. the &#x60;preceding_version_uid&#x60;) must be specified in the &#x60;If-Match&#x60; header.  The response will contain the updated EHR_STATUS resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param ifMatch Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#39;s value. 
     * @param ehrStatus The new EHR_STATUS. 
     * @param prefer Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return=minimal)
     * @return EhrStatus
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ehrStatusUpdate(ehrId: kotlin.String, ifMatch: kotlin.String, ehrStatus: EhrStatus, prefer: Prefer_ehrStatusUpdate? = Prefer_ehrStatusUpdate.minimal) : EhrStatus {
        val localVarResponse = ehrStatusUpdateWithHttpInfo(ehrId = ehrId, ifMatch = ifMatch, ehrStatus = ehrStatus, prefer = prefer)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EhrStatus
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update EHR_STATUS
     * Updates EHR_STATUS associated with the EHR identified by &#x60;ehr_id&#x60;.  The existing latest &#x60;version_uid&#x60; of EHR_STATUS resource (i.e. the &#x60;preceding_version_uid&#x60;) must be specified in the &#x60;If-Match&#x60; header.  The response will contain the updated EHR_STATUS resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param ifMatch Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#39;s value. 
     * @param ehrStatus The new EHR_STATUS. 
     * @param prefer Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return=minimal)
     * @return ApiResponse<EhrStatus?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ehrStatusUpdateWithHttpInfo(ehrId: kotlin.String, ifMatch: kotlin.String, ehrStatus: EhrStatus, prefer: Prefer_ehrStatusUpdate?) : ApiResponse<EhrStatus?> {
        val localVariableConfig = ehrStatusUpdateRequestConfig(ehrId = ehrId, ifMatch = ifMatch, ehrStatus = ehrStatus, prefer = prefer)

        return request<EhrStatus, EhrStatus>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ehrStatusUpdate
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param ifMatch Header to make the request conditional.  Together with &#x60;ETag&#x60; request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\&quot;mid-air collisions\&quot;). The format is always an &#x60;version_uid&#x60; identifier enclosed by double quotes. The operation will be performed only if the existing latest &#x60;version_uid&#x60; of the resource (i.e. the &#x60;preceding_version_uid&#x60;) matches this header&#39;s value. 
     * @param ehrStatus The new EHR_STATUS. 
     * @param prefer Request header to indicate the preference over response details. The response will contain the entire resource when the &#x60;Prefer&#x60; header has a value of &#x60;return&#x3D;representation&#x60;.  (optional, default to return=minimal)
     * @return RequestConfig
     */
    fun ehrStatusUpdateRequestConfig(ehrId: kotlin.String, ifMatch: kotlin.String, ehrStatus: EhrStatus, prefer: Prefer_ehrStatusUpdate?) : RequestConfig<EhrStatus> {
        val localVariableBody = ehrStatus
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        ifMatch.apply { localVariableHeaders["If-Match"] = this.toString() }
        prefer?.apply { localVariableHeaders["Prefer"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/ehr/{ehr_id}/ehr_status".replace("{"+"ehr_id"+"}", encodeURIComponent(ehrId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get versioned EHR_STATUS
     * Retrieves a VERSIONED_EHR_STATUS associated with an EHR identified by &#x60;ehr_id&#x60;. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @return VersionedEhrStatus
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun versionedEhrStatusGet(ehrId: kotlin.String) : VersionedEhrStatus {
        val localVarResponse = versionedEhrStatusGetWithHttpInfo(ehrId = ehrId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VersionedEhrStatus
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get versioned EHR_STATUS
     * Retrieves a VERSIONED_EHR_STATUS associated with an EHR identified by &#x60;ehr_id&#x60;. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @return ApiResponse<VersionedEhrStatus?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun versionedEhrStatusGetWithHttpInfo(ehrId: kotlin.String) : ApiResponse<VersionedEhrStatus?> {
        val localVariableConfig = versionedEhrStatusGetRequestConfig(ehrId = ehrId)

        return request<Unit, VersionedEhrStatus>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation versionedEhrStatusGet
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @return RequestConfig
     */
    fun versionedEhrStatusGetRequestConfig(ehrId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/ehr/{ehr_id}/versioned_ehr_status".replace("{"+"ehr_id"+"}", encodeURIComponent(ehrId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get versioned EHR_STATUS revision history
     * Retrieves revision history of the VERSIONED_EHR_STATUS associated with the EHR identified by &#x60;ehr_id&#x60;. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @return RevisionHistory
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun versionedEhrStatusRevisionHistory(ehrId: kotlin.String) : RevisionHistory {
        val localVarResponse = versionedEhrStatusRevisionHistoryWithHttpInfo(ehrId = ehrId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RevisionHistory
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get versioned EHR_STATUS revision history
     * Retrieves revision history of the VERSIONED_EHR_STATUS associated with the EHR identified by &#x60;ehr_id&#x60;. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @return ApiResponse<RevisionHistory?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun versionedEhrStatusRevisionHistoryWithHttpInfo(ehrId: kotlin.String) : ApiResponse<RevisionHistory?> {
        val localVariableConfig = versionedEhrStatusRevisionHistoryRequestConfig(ehrId = ehrId)

        return request<Unit, RevisionHistory>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation versionedEhrStatusRevisionHistory
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @return RequestConfig
     */
    fun versionedEhrStatusRevisionHistoryRequestConfig(ehrId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/ehr/{ehr_id}/versioned_ehr_status/revision_history".replace("{"+"ehr_id"+"}", encodeURIComponent(ehrId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get versioned EHR_STATUS version at time
     * Retrieves a VERSION from the VERSIONED_EHR_STATUS associated with the EHR identified by &#x60;ehr_id&#x60;.  If &#x60;version_at_time&#x60; is supplied, retrieves the VERSION extant _at specified time_, otherwise retrieves the _latest_ VERSION. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param versionAtTime A given time in the extended ISO 8601 format.  (optional)
     * @return Version
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun versionedEhrStatusVersionGetAtTime(ehrId: kotlin.String, versionAtTime: kotlin.String? = null) : Version {
        val localVarResponse = versionedEhrStatusVersionGetAtTimeWithHttpInfo(ehrId = ehrId, versionAtTime = versionAtTime)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Version
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get versioned EHR_STATUS version at time
     * Retrieves a VERSION from the VERSIONED_EHR_STATUS associated with the EHR identified by &#x60;ehr_id&#x60;.  If &#x60;version_at_time&#x60; is supplied, retrieves the VERSION extant _at specified time_, otherwise retrieves the _latest_ VERSION. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param versionAtTime A given time in the extended ISO 8601 format.  (optional)
     * @return ApiResponse<Version?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun versionedEhrStatusVersionGetAtTimeWithHttpInfo(ehrId: kotlin.String, versionAtTime: kotlin.String?) : ApiResponse<Version?> {
        val localVariableConfig = versionedEhrStatusVersionGetAtTimeRequestConfig(ehrId = ehrId, versionAtTime = versionAtTime)

        return request<Unit, Version>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation versionedEhrStatusVersionGetAtTime
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param versionAtTime A given time in the extended ISO 8601 format.  (optional)
     * @return RequestConfig
     */
    fun versionedEhrStatusVersionGetAtTimeRequestConfig(ehrId: kotlin.String, versionAtTime: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (versionAtTime != null) {
                    put("version_at_time", listOf(versionAtTime.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/ehr/{ehr_id}/versioned_ehr_status/version".replace("{"+"ehr_id"+"}", encodeURIComponent(ehrId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get versioned EHR_STATUS version by id
     * Retrieves a VERSION identified by &#x60;version_uid&#x60; of an EHR_STATUS associated with the EHR identified by &#x60;ehr_id&#x60;. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param versionUid VERSION identifier taken from VERSION.uid.value. 
     * @return Version
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun versionedEhrStatusVersionGetById(ehrId: kotlin.String, versionUid: kotlin.String) : Version {
        val localVarResponse = versionedEhrStatusVersionGetByIdWithHttpInfo(ehrId = ehrId, versionUid = versionUid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Version
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get versioned EHR_STATUS version by id
     * Retrieves a VERSION identified by &#x60;version_uid&#x60; of an EHR_STATUS associated with the EHR identified by &#x60;ehr_id&#x60;. 
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param versionUid VERSION identifier taken from VERSION.uid.value. 
     * @return ApiResponse<Version?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun versionedEhrStatusVersionGetByIdWithHttpInfo(ehrId: kotlin.String, versionUid: kotlin.String) : ApiResponse<Version?> {
        val localVariableConfig = versionedEhrStatusVersionGetByIdRequestConfig(ehrId = ehrId, versionUid = versionUid)

        return request<Unit, Version>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation versionedEhrStatusVersionGetById
     *
     * @param ehrId EHR identifier taken from EHR.ehr_id.value. 
     * @param versionUid VERSION identifier taken from VERSION.uid.value. 
     * @return RequestConfig
     */
    fun versionedEhrStatusVersionGetByIdRequestConfig(ehrId: kotlin.String, versionUid: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/ehr/{ehr_id}/versioned_ehr_status/version/{version_uid}".replace("{"+"ehr_id"+"}", encodeURIComponent(ehrId.toString())).replace("{"+"version_uid"+"}", encodeURIComponent(versionUid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
